{
    "data": {
        "edges": [
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "ChatInput",
                        "id": "ChatInput-gnfst",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "OllamaModel-DzbS5",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "xy-edge__ChatInput-gnfst{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-gnfst\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OllamaModel-DzbS5{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OllamaModel-DzbS5\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                "selected": false,
                "source": "ChatInput-gnfst",
                "sourceHandle": "{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-gnfst\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "OllamaModel-DzbS5",
                "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OllamaModel-DzbS5\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "OllamaModel",
                        "id": "OllamaModel-DzbS5",
                        "name": "text_output",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "ChatOutput-RtQzA",
                        "inputTypes": [
                            "Data",
                            "DataFrame",
                            "Message"
                        ],
                        "type": "other"
                    }
                },
                "id": "xy-edge__OllamaModel-DzbS5{\u0153dataType\u0153:\u0153OllamaModel\u0153,\u0153id\u0153:\u0153OllamaModel-DzbS5\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-RtQzA{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-RtQzA\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}",
                "selected": false,
                "source": "OllamaModel-DzbS5",
                "sourceHandle": "{\u0153dataType\u0153:\u0153OllamaModel\u0153,\u0153id\u0153:\u0153OllamaModel-DzbS5\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "ChatOutput-RtQzA",
                "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-RtQzA\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "Prompt",
                        "id": "Prompt-UgOSM",
                        "name": "prompt",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "system_message",
                        "id": "OllamaModel-DzbS5",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "xy-edge__Prompt-UgOSM{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-UgOSM\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OllamaModel-DzbS5{\u0153fieldName\u0153:\u0153system_message\u0153,\u0153id\u0153:\u0153OllamaModel-DzbS5\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                "selected": false,
                "source": "Prompt-UgOSM",
                "sourceHandle": "{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-UgOSM\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "OllamaModel-DzbS5",
                "targetHandle": "{\u0153fieldName\u0153:\u0153system_message\u0153,\u0153id\u0153:\u0153OllamaModel-DzbS5\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "Memory",
                        "id": "Memory-MC3g3",
                        "name": "messages_text",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "memory",
                        "id": "Prompt-UgOSM",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "xy-edge__Memory-MC3g3{\u0153dataType\u0153:\u0153Memory\u0153,\u0153id\u0153:\u0153Memory-MC3g3\u0153,\u0153name\u0153:\u0153messages_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-UgOSM{\u0153fieldName\u0153:\u0153memory\u0153,\u0153id\u0153:\u0153Prompt-UgOSM\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                "selected": false,
                "source": "Memory-MC3g3",
                "sourceHandle": "{\u0153dataType\u0153:\u0153Memory\u0153,\u0153id\u0153:\u0153Memory-MC3g3\u0153,\u0153name\u0153:\u0153messages_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "Prompt-UgOSM",
                "targetHandle": "{\u0153fieldName\u0153:\u0153memory\u0153,\u0153id\u0153:\u0153Prompt-UgOSM\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "RedisChatMemory",
                        "id": "RedisChatMemory-nvzNR",
                        "name": "memory",
                        "output_types": [
                            "Memory"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "memory",
                        "id": "Memory-MC3g3",
                        "inputTypes": [
                            "Memory"
                        ],
                        "type": "other"
                    }
                },
                "id": "xy-edge__RedisChatMemory-nvzNR{\u0153dataType\u0153:\u0153RedisChatMemory\u0153,\u0153id\u0153:\u0153RedisChatMemory-nvzNR\u0153,\u0153name\u0153:\u0153memory\u0153,\u0153output_types\u0153:[\u0153Memory\u0153]}-Memory-MC3g3{\u0153fieldName\u0153:\u0153memory\u0153,\u0153id\u0153:\u0153Memory-MC3g3\u0153,\u0153inputTypes\u0153:[\u0153Memory\u0153],\u0153type\u0153:\u0153other\u0153}",
                "selected": true,
                "source": "RedisChatMemory-nvzNR",
                "sourceHandle": "{\u0153dataType\u0153:\u0153RedisChatMemory\u0153,\u0153id\u0153:\u0153RedisChatMemory-nvzNR\u0153,\u0153name\u0153:\u0153memory\u0153,\u0153output_types\u0153:[\u0153Memory\u0153]}",
                "target": "Memory-MC3g3",
                "targetHandle": "{\u0153fieldName\u0153:\u0153memory\u0153,\u0153id\u0153:\u0153Memory-MC3g3\u0153,\u0153inputTypes\u0153:[\u0153Memory\u0153],\u0153type\u0153:\u0153other\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "RedisChatMemory",
                        "id": "RedisChatMemory-nvzNR",
                        "name": "memory",
                        "output_types": [
                            "Memory"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "memory",
                        "id": "StoreMessage-TYaWA",
                        "inputTypes": [
                            "Memory"
                        ],
                        "type": "other"
                    }
                },
                "id": "xy-edge__RedisChatMemory-nvzNR{\u0153dataType\u0153:\u0153RedisChatMemory\u0153,\u0153id\u0153:\u0153RedisChatMemory-nvzNR\u0153,\u0153name\u0153:\u0153memory\u0153,\u0153output_types\u0153:[\u0153Memory\u0153]}-StoreMessage-TYaWA{\u0153fieldName\u0153:\u0153memory\u0153,\u0153id\u0153:\u0153StoreMessage-TYaWA\u0153,\u0153inputTypes\u0153:[\u0153Memory\u0153],\u0153type\u0153:\u0153other\u0153}",
                "selected": false,
                "source": "RedisChatMemory-nvzNR",
                "sourceHandle": "{\u0153dataType\u0153:\u0153RedisChatMemory\u0153,\u0153id\u0153:\u0153RedisChatMemory-nvzNR\u0153,\u0153name\u0153:\u0153memory\u0153,\u0153output_types\u0153:[\u0153Memory\u0153]}",
                "target": "StoreMessage-TYaWA",
                "targetHandle": "{\u0153fieldName\u0153:\u0153memory\u0153,\u0153id\u0153:\u0153StoreMessage-TYaWA\u0153,\u0153inputTypes\u0153:[\u0153Memory\u0153],\u0153type\u0153:\u0153other\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "ChatOutput",
                        "id": "ChatOutput-RtQzA",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "message",
                        "id": "StoreMessage-TYaWA",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "xy-edge__ChatOutput-RtQzA{\u0153dataType\u0153:\u0153ChatOutput\u0153,\u0153id\u0153:\u0153ChatOutput-RtQzA\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-StoreMessage-TYaWA{\u0153fieldName\u0153:\u0153message\u0153,\u0153id\u0153:\u0153StoreMessage-TYaWA\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                "selected": false,
                "source": "ChatOutput-RtQzA",
                "sourceHandle": "{\u0153dataType\u0153:\u0153ChatOutput\u0153,\u0153id\u0153:\u0153ChatOutput-RtQzA\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "StoreMessage-TYaWA",
                "targetHandle": "{\u0153fieldName\u0153:\u0153message\u0153,\u0153id\u0153:\u0153StoreMessage-TYaWA\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
            }
        ],
        "nodes": [
            {
                "data": {
                    "id": "ChatInput-gnfst",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Get chat inputs from the Playground.",
                        "display_name": "Chat Input",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "input_value",
                            "should_store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "files",
                            "background_color",
                            "chat_icon",
                            "text_color"
                        ],
                        "frozen": false,
                        "icon": "MessagesSquare",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": true,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "method": "message_response",
                                "name": "message",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "background_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Background Color",
                                "dynamic": false,
                                "info": "The background color of the icon.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "background_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "chat_icon": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Icon",
                                "dynamic": false,
                                "info": "The icon of the message.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "chat_icon",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                            },
                            "files": {
                                "_input_type": "FileInput",
                                "advanced": true,
                                "display_name": "Files",
                                "dynamic": false,
                                "fileTypes": [
                                    "txt",
                                    "md",
                                    "mdx",
                                    "csv",
                                    "json",
                                    "yaml",
                                    "yml",
                                    "xml",
                                    "html",
                                    "htm",
                                    "pdf",
                                    "docx",
                                    "py",
                                    "sh",
                                    "sql",
                                    "js",
                                    "ts",
                                    "tsx",
                                    "jpg",
                                    "jpeg",
                                    "png",
                                    "bmp",
                                    "image"
                                ],
                                "file_path": "",
                                "info": "Files to be sent with the message.",
                                "list": true,
                                "list_add_label": "Add More",
                                "name": "files",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "temp_file": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "file",
                                "value": ""
                            },
                            "input_value": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "Text",
                                "dynamic": false,
                                "info": "Message to be passed as input.",
                                "input_types": [],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "sender": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Sender Type",
                                "dynamic": false,
                                "info": "Type of sender.",
                                "name": "sender",
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "User"
                            },
                            "sender_name": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Sender Name",
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "sender_name",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "User"
                            },
                            "session_id": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Session ID",
                                "dynamic": false,
                                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "session_id",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "should_store_message": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Store Messages",
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "should_store_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            },
                            "text_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Text Color",
                                "dynamic": false,
                                "info": "The text color of the name",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "text_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": false,
                    "type": "ChatInput"
                },
                "dragging": false,
                "id": "ChatInput-gnfst",
                "measured": {
                    "height": 66,
                    "width": 192
                },
                "position": {
                    "x": -659.4590639844401,
                    "y": 87.01102571299671
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "ChatOutput-RtQzA",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "input_value",
                            "should_store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "data_template",
                            "background_color",
                            "chat_icon",
                            "text_color",
                            "clean_data"
                        ],
                        "frozen": false,
                        "icon": "MessagesSquare",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": true,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "method": "message_response",
                                "name": "message",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "background_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Background Color",
                                "dynamic": false,
                                "info": "The background color of the icon.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "background_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "chat_icon": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Icon",
                                "dynamic": false,
                                "info": "The icon of the message.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "chat_icon",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "clean_data": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Basic Clean Data",
                                "dynamic": false,
                                "info": "Whether to clean the data",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "clean_data",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
                            },
                            "data_template": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Data Template",
                                "dynamic": false,
                                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "data_template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "{text}"
                            },
                            "input_value": {
                                "_input_type": "HandleInput",
                                "advanced": false,
                                "display_name": "Text",
                                "dynamic": false,
                                "info": "Message to be passed as output.",
                                "input_types": [
                                    "Data",
                                    "DataFrame",
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "input_value",
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "sender": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Sender Type",
                                "dynamic": false,
                                "info": "Type of sender.",
                                "name": "sender",
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Machine"
                            },
                            "sender_name": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Sender Name",
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "sender_name",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "AI"
                            },
                            "session_id": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Session ID",
                                "dynamic": false,
                                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "session_id",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "should_store_message": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Store Messages",
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "should_store_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            },
                            "text_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Text Color",
                                "dynamic": false,
                                "info": "The text color of the name",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "text_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": false,
                    "type": "ChatOutput"
                },
                "dragging": false,
                "id": "ChatOutput-RtQzA",
                "measured": {
                    "height": 66,
                    "width": 192
                },
                "position": {
                    "x": 1130.0211060679353,
                    "y": 489.7730924624818
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "OllamaModel-DzbS5",
                    "node": {
                        "base_classes": [
                            "LanguageModel",
                            "Message"
                        ],
                        "beta": false,
                        "category": "models",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Generate text using Ollama Local LLMs.",
                        "display_name": "Ollama",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "base_url",
                            "model_name",
                            "temperature",
                            "format",
                            "metadata",
                            "mirostat",
                            "mirostat_eta",
                            "mirostat_tau",
                            "num_ctx",
                            "num_gpu",
                            "num_thread",
                            "repeat_last_n",
                            "repeat_penalty",
                            "tfs_z",
                            "timeout",
                            "top_k",
                            "top_p",
                            "verbose",
                            "tags",
                            "stop_tokens",
                            "system",
                            "tool_model_enabled",
                            "template",
                            "input_value",
                            "system_message",
                            "stream"
                        ],
                        "frozen": false,
                        "icon": "Ollama",
                        "key": "OllamaModel",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "hidden": false,
                                "method": "text_response",
                                "name": "text_output",
                                "options": null,
                                "required_inputs": [],
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            },
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Language Model",
                                "method": "build_model",
                                "name": "model_output",
                                "options": null,
                                "required_inputs": [],
                                "selected": "LanguageModel",
                                "tool_mode": true,
                                "types": [
                                    "LanguageModel"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 1.1514907767935298e-16,
                        "template": {
                            "_type": "Component",
                            "base_url": {
                                "_input_type": "MessageTextInput",
                                "advanced": false,
                                "display_name": "Base URL",
                                "dynamic": false,
                                "info": "Endpoint of the Ollama API.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "base_url",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "http://host.docker.internal:11434"
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "import asyncio\nfrom typing import Any\nfrom urllib.parse import urljoin\n\nimport httpx\nfrom langchain_ollama import ChatOllama\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.ollama_constants import OLLAMA_TOOL_MODELS_BASE, URL_LIST\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SliderInput\nfrom langflow.logging import logger\n\nHTTP_STATUS_OK = 200\n\n\nclass ChatOllamaComponent(LCModelComponent):\n    display_name = \"Ollama\"\n    description = \"Generate text using Ollama Local LLMs.\"\n    icon = \"Ollama\"\n    name = \"OllamaModel\"\n\n    # Define constants for JSON keys\n    JSON_MODELS_KEY = \"models\"\n    JSON_NAME_KEY = \"name\"\n    JSON_CAPABILITIES_KEY = \"capabilities\"\n    DESIRED_CAPABILITY = \"completion\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"Endpoint of the Ollama API.\",\n            value=\"\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            options=[],\n            info=\"Refer to https://ollama.com/library for more models.\",\n            refresh_button=True,\n            real_time_refresh=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"format\", display_name=\"Format\", info=\"Specify the format of the output (e.g., json).\", advanced=True\n        ),\n        DictInput(name=\"metadata\", display_name=\"Metadata\", info=\"Metadata to add to the run trace.\", advanced=True),\n        DropdownInput(\n            name=\"mirostat\",\n            display_name=\"Mirostat\",\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\n            value=\"Disabled\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        FloatInput(\n            name=\"mirostat_eta\",\n            display_name=\"Mirostat Eta\",\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_tau\",\n            display_name=\"Mirostat Tau\",\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_ctx\",\n            display_name=\"Context Window Size\",\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_gpu\",\n            display_name=\"Number of GPUs\",\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_thread\",\n            display_name=\"Number of Threads\",\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"repeat_last_n\",\n            display_name=\"Repeat Last N\",\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"repeat_penalty\",\n            display_name=\"Repeat Penalty\",\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\n            advanced=True,\n        ),\n        FloatInput(name=\"tfs_z\", display_name=\"TFS Z\", info=\"Tail free sampling value. (Default: 1)\", advanced=True),\n        IntInput(name=\"timeout\", display_name=\"Timeout\", info=\"Timeout for the request stream.\", advanced=True),\n        IntInput(\n            name=\"top_k\", display_name=\"Top K\", info=\"Limits token selection to top K. (Default: 40)\", advanced=True\n        ),\n        FloatInput(name=\"top_p\", display_name=\"Top P\", info=\"Works together with top-k. (Default: 0.9)\", advanced=True),\n        BoolInput(name=\"verbose\", display_name=\"Verbose\", info=\"Whether to print out response text.\", advanced=True),\n        MessageTextInput(\n            name=\"tags\",\n            display_name=\"Tags\",\n            info=\"Comma-separated list of tags to add to the run trace.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"stop_tokens\",\n            display_name=\"Stop Tokens\",\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"system\", display_name=\"System\", info=\"System to use for generating text.\", advanced=True\n        ),\n        BoolInput(\n            name=\"tool_model_enabled\",\n            display_name=\"Tool Model Enabled\",\n            info=\"Whether to enable tool calling in the model.\",\n            value=False,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"template\", display_name=\"Template\", info=\"Template to use for generating text.\", advanced=True\n        ),\n        *LCModelComponent._base_inputs,\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(self.mirostat, 0)\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n        else:\n            mirostat_eta = self.mirostat_eta\n            mirostat_tau = self.mirostat_tau\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": self.base_url,\n            \"model\": self.model_name,\n            \"mirostat\": mirostat_value,\n            \"format\": self.format,\n            \"metadata\": self.metadata,\n            \"tags\": self.tags.split(\",\") if self.tags else None,\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": self.num_ctx or None,\n            \"num_gpu\": self.num_gpu or None,\n            \"num_thread\": self.num_thread or None,\n            \"repeat_last_n\": self.repeat_last_n or None,\n            \"repeat_penalty\": self.repeat_penalty or None,\n            \"temperature\": self.temperature or None,\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\n            \"system\": self.system,\n            \"tfs_z\": self.tfs_z or None,\n            \"timeout\": self.timeout or None,\n            \"top_k\": self.top_k or None,\n            \"top_p\": self.top_p or None,\n            \"verbose\": self.verbose,\n            \"template\": self.template,\n        }\n\n        # Remove parameters with None values\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)\n        except Exception as e:\n            msg = (\n                \"Unable to connect to the Ollama API. \",\n                \"Please verify the base URL, ensure the relevant Ollama model is pulled, and try again.\",\n            )\n            raise ValueError(msg) from e\n\n        return output\n\n    async def is_valid_ollama_url(self, url: str) -> bool:\n        try:\n            async with httpx.AsyncClient() as client:\n                return (await client.get(urljoin(url, \"api/tags\"))).status_code == HTTP_STATUS_OK\n        except httpx.RequestError:\n            return False\n\n    async def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name == \"mirostat\":\n            if field_value == \"Disabled\":\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\n                build_config[\"mirostat_eta\"][\"value\"] = None\n                build_config[\"mirostat_tau\"][\"value\"] = None\n\n            else:\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\n\n                if field_value == \"Mirostat 2.0\":\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\n                else:\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\n\n        if field_name in {\"base_url\", \"model_name\"}:\n            if build_config[\"base_url\"].get(\"load_from_db\", False):\n                base_url_value = await self.get_variables(build_config[\"base_url\"].get(\"value\", \"\"), \"base_url\")\n            else:\n                base_url_value = build_config[\"base_url\"].get(\"value\", \"\")\n\n            if not await self.is_valid_ollama_url(base_url_value):\n                # Check if any URL in the list is valid\n                valid_url = \"\"\n                check_urls = URL_LIST\n                if self.base_url:\n                    check_urls = [self.base_url, *URL_LIST]\n                for url in check_urls:\n                    if await self.is_valid_ollama_url(url):\n                        valid_url = url\n                        break\n                if valid_url != \"\":\n                    build_config[\"base_url\"][\"value\"] = valid_url\n                else:\n                    msg = \"No valid Ollama URL found.\"\n                    raise ValueError(msg)\n        if field_name in {\"model_name\", \"base_url\", \"tool_model_enabled\"}:\n            if await self.is_valid_ollama_url(self.base_url):\n                tool_model_enabled = build_config[\"tool_model_enabled\"].get(\"value\", False) or self.tool_model_enabled\n                build_config[\"model_name\"][\"options\"] = await self.get_models(self.base_url, tool_model_enabled)\n            elif await self.is_valid_ollama_url(build_config[\"base_url\"].get(\"value\", \"\")):\n                tool_model_enabled = build_config[\"tool_model_enabled\"].get(\"value\", False) or self.tool_model_enabled\n                build_config[\"model_name\"][\"options\"] = await self.get_models(\n                    build_config[\"base_url\"].get(\"value\", \"\"), tool_model_enabled\n                )\n            else:\n                build_config[\"model_name\"][\"options\"] = []\n        if field_name == \"keep_alive_flag\":\n            if field_value == \"Keep\":\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            elif field_value == \"Immediately\":\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            else:\n                build_config[\"keep_alive\"][\"advanced\"] = False\n\n        return build_config\n\n    async def get_models(self, base_url_value: str, tool_model_enabled: bool | None = None) -> list[str]:\n        \"\"\"Fetches a list of models from the Ollama API that do not have the \"embedding\" capability.\n\n        Args:\n            base_url_value (str): The base URL of the Ollama API.\n            tool_model_enabled (bool | None, optional): If True, filters the models further to include\n                only those that support tool calling. Defaults to None.\n\n        Returns:\n            list[str]: A list of model names that do not have the \"embedding\" capability. If\n                `tool_model_enabled` is True, only models supporting tool calling are included.\n\n        Raises:\n            ValueError: If there is an issue with the API request or response, or if the model\n                names cannot be retrieved.\n        \"\"\"\n        try:\n            # Normalize the base URL to avoid the repeated \"/\" at the end\n            base_url = base_url_value.rstrip(\"/\") + \"/\"\n\n            # Ollama REST API to return models\n            tags_url = urljoin(base_url, \"api/tags\")\n\n            # Ollama REST API to return model capabilities\n            show_url = urljoin(base_url, \"api/show\")\n\n            async with httpx.AsyncClient() as client:\n                # Fetch available models\n                tags_response = await client.get(tags_url)\n                tags_response.raise_for_status()\n                models = tags_response.json()\n                if asyncio.iscoroutine(models):\n                    models = await models\n                logger.debug(f\"Available models: {models}\")\n\n                # Filter models that are NOT embedding models\n                model_ids = []\n                for model in models[self.JSON_MODELS_KEY]:\n                    model_name = model[self.JSON_NAME_KEY]\n                    logger.debug(f\"Checking model: {model_name}\")\n\n                    payload = {\"model\": model_name}\n                    show_response = await client.post(show_url, json=payload)\n                    show_response.raise_for_status()\n                    json_data = show_response.json()\n                    if asyncio.iscoroutine(json_data):\n                        json_data = await json_data\n                    capabilities = json_data.get(self.JSON_CAPABILITIES_KEY, [])\n                    logger.debug(f\"Model: {model_name}, Capabilities: {capabilities}\")\n\n                    if self.DESIRED_CAPABILITY in capabilities:\n                        model_ids.append(model_name)\n\n        except (httpx.RequestError, ValueError) as e:\n            msg = \"Could not get model names from Ollama.\"\n            raise ValueError(msg) from e\n\n        return (\n            model_ids if not tool_model_enabled else [model for model in model_ids if self.supports_tool_calling(model)]\n        )\n\n    def supports_tool_calling(self, model: str) -> bool:\n        \"\"\"Check if model name is in the base of any models example llama3.3 can have 1b and 2b.\"\"\"\n        return any(model.startswith(f\"{tool_model}\") for tool_model in OLLAMA_TOOL_MODELS_BASE)\n"
                            },
                            "format": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Format",
                                "dynamic": false,
                                "info": "Specify the format of the output (e.g., json).",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "format",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "input_value": {
                                "_input_type": "MessageInput",
                                "advanced": false,
                                "display_name": "Input",
                                "dynamic": false,
                                "info": "",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "metadata": {
                                "_input_type": "DictInput",
                                "advanced": true,
                                "display_name": "Metadata",
                                "dynamic": false,
                                "info": "Metadata to add to the run trace.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "metadata",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "type": "dict",
                                "value": {}
                            },
                            "mirostat": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Mirostat",
                                "dynamic": false,
                                "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                                "name": "mirostat",
                                "options": [
                                    "Disabled",
                                    "Mirostat",
                                    "Mirostat 2.0"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Disabled"
                            },
                            "mirostat_eta": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Mirostat Eta",
                                "dynamic": false,
                                "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "mirostat_eta",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "mirostat_tau": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Mirostat Tau",
                                "dynamic": false,
                                "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "mirostat_tau",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "model_name": {
                                "_input_type": "DropdownInput",
                                "advanced": false,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Model Name",
                                "dynamic": false,
                                "info": "Refer to https://ollama.com/library for more models.",
                                "name": "model_name",
                                "options": [
                                    "smollm2:latest",
                                    "smollm2:1.7b",
                                    "llama3.2:3b",
                                    "qwen3:latest",
                                    "PetrosStav/gemma3-tools:12b",
                                    "gemma3:latest"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "refresh_button": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "gemma3:latest"
                            },
                            "num_ctx": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Context Window Size",
                                "dynamic": false,
                                "info": "Size of the context window for generating tokens. (Default: 2048)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_ctx",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "num_gpu": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Number of GPUs",
                                "dynamic": false,
                                "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_gpu",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "num_thread": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Number of Threads",
                                "dynamic": false,
                                "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_thread",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "repeat_last_n": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Repeat Last N",
                                "dynamic": false,
                                "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "repeat_last_n",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "repeat_penalty": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Repeat Penalty",
                                "dynamic": false,
                                "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "repeat_penalty",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "stop_tokens": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Stop Tokens",
                                "dynamic": false,
                                "info": "Comma-separated list of tokens to signal the model to stop generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "stop_tokens",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "stream": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Stream",
                                "dynamic": false,
                                "info": "Stream the response from the model. Streaming works only in Chat.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "stream",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            },
                            "system": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "System",
                                "dynamic": false,
                                "info": "System to use for generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "system",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "system_message": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "System Message",
                                "dynamic": false,
                                "info": "System message to pass to the model.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "system_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "tags": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Tags",
                                "dynamic": false,
                                "info": "Comma-separated list of tags to add to the run trace.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "tags",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "temperature": {
                                "_input_type": "SliderInput",
                                "advanced": true,
                                "display_name": "Temperature",
                                "dynamic": false,
                                "info": "",
                                "max_label": "",
                                "max_label_icon": "",
                                "min_label": "",
                                "min_label_icon": "",
                                "name": "temperature",
                                "placeholder": "",
                                "range_spec": {
                                    "max": 1,
                                    "min": 0,
                                    "step": 0.01,
                                    "step_type": "float"
                                },
                                "required": false,
                                "show": true,
                                "slider_buttons": false,
                                "slider_buttons_options": [],
                                "slider_input": false,
                                "title_case": false,
                                "tool_mode": false,
                                "type": "slider",
                                "value": 0.1
                            },
                            "template": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Template",
                                "dynamic": false,
                                "info": "Template to use for generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "tfs_z": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "TFS Z",
                                "dynamic": false,
                                "info": "Tail free sampling value. (Default: 1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "tfs_z",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "timeout": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Timeout",
                                "dynamic": false,
                                "info": "Timeout for the request stream.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "timeout",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "tool_model_enabled": {
                                "_input_type": "BoolInput",
                                "advanced": false,
                                "display_name": "Tool Model Enabled",
                                "dynamic": false,
                                "info": "Whether to enable tool calling in the model.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "tool_model_enabled",
                                "placeholder": "",
                                "real_time_refresh": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            },
                            "top_k": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Top K",
                                "dynamic": false,
                                "info": "Limits token selection to top K. (Default: 40)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "top_k",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "top_p": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Top P",
                                "dynamic": false,
                                "info": "Works together with top-k. (Default: 0.9)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "top_p",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "verbose": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Verbose",
                                "dynamic": false,
                                "info": "Whether to print out response text.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "verbose",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "OllamaModel"
                },
                "dragging": false,
                "id": "OllamaModel-DzbS5",
                "measured": {
                    "height": 565,
                    "width": 320
                },
                "position": {
                    "x": 682.15960081509,
                    "y": -220.32902548899074
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "Prompt-UgOSM",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {
                            "template": [
                                "memory"
                            ]
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "documentation": "",
                        "edited": false,
                        "error": null,
                        "field_order": [
                            "template",
                            "tool_placeholder"
                        ],
                        "frozen": false,
                        "full_path": null,
                        "icon": "prompts",
                        "is_composition": null,
                        "is_input": null,
                        "is_output": null,
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "name": "",
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Prompt Message",
                                "hidden": false,
                                "method": "build_prompt",
                                "name": "prompt",
                                "options": null,
                                "required_inputs": null,
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "priority": null,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                            },
                            "memory": {
                                "advanced": false,
                                "display_name": "memory",
                                "dynamic": false,
                                "field_type": "str",
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "memory",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            },
                            "template": {
                                "_input_type": "PromptInput",
                                "advanced": false,
                                "display_name": "Template",
                                "dynamic": false,
                                "info": "",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "type": "prompt",
                                "value": "You are a helpful assistant that answers questions.\n\nUse markdown to format your answer, properly embedding images and urls.\n\nHistory:\n\n{memory}"
                            },
                            "tool_placeholder": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Tool Placeholder",
                                "dynamic": false,
                                "info": "A placeholder input for tool mode.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "tool_placeholder",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": true,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "Prompt"
                },
                "dragging": false,
                "id": "Prompt-UgOSM",
                "measured": {
                    "height": 411,
                    "width": 320
                },
                "position": {
                    "x": 193.29960048648593,
                    "y": 352.59388630282774
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "Memory-MC3g3",
                    "node": {
                        "base_classes": [
                            "Data",
                            "DataFrame",
                            "Message"
                        ],
                        "beta": false,
                        "category": "helpers",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
                        "display_name": "Message History",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "memory",
                            "sender",
                            "sender_name",
                            "n_messages",
                            "session_id",
                            "order",
                            "template"
                        ],
                        "frozen": false,
                        "icon": "message-square-more",
                        "key": "Memory",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Data",
                                "method": "retrieve_messages",
                                "name": "messages",
                                "selected": "Data",
                                "tool_mode": true,
                                "types": [
                                    "Data"
                                ],
                                "value": "__UNDEFINED__"
                            },
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "hidden": false,
                                "method": "retrieve_messages_as_text",
                                "name": "messages_text",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            },
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "DataFrame",
                                "method": "as_dataframe",
                                "name": "dataframe",
                                "selected": "DataFrame",
                                "tool_mode": true,
                                "types": [
                                    "DataFrame"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 0.585592592248788,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from typing import cast\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import aget_messages\nfrom langflow.schema import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Message History\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"Memory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n            tool_mode=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Message\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    async def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory and not hasattr(self.memory, \"aget_messages\"):\n            memory_name = type(self.memory).__name__\n            err_msg = f\"External Memory object ({memory_name}) must have 'aget_messages' method.\"\n            raise AttributeError(err_msg)\n        # Check if n_messages is None or 0\n        if n_messages == 0:\n            stored = []\n        elif self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = await self.memory.aget_messages()\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = await aget_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return cast(Data, stored)\n\n    async def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, await self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n\n    async def as_dataframe(self) -> DataFrame:\n        \"\"\"Convert the retrieved messages into a DataFrame.\n\n        Returns:\n            DataFrame: A DataFrame containing the message data.\n        \"\"\"\n        messages = await self.retrieve_messages()\n        return DataFrame(messages)\n"
                            },
                            "memory": {
                                "_input_type": "HandleInput",
                                "advanced": false,
                                "display_name": "External Memory",
                                "dynamic": false,
                                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                "input_types": [
                                    "Memory"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "memory",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "n_messages": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Number of Messages",
                                "dynamic": false,
                                "info": "Number of messages to retrieve.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "n_messages",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": 100
                            },
                            "order": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Order",
                                "dynamic": false,
                                "info": "Order of the messages.",
                                "name": "order",
                                "options": [
                                    "Ascending",
                                    "Descending"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Ascending"
                            },
                            "sender": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Sender Type",
                                "dynamic": false,
                                "info": "Filter by sender type.",
                                "name": "sender",
                                "options": [
                                    "Machine",
                                    "User",
                                    "Machine and User"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Machine and User"
                            },
                            "sender_name": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Sender Name",
                                "dynamic": false,
                                "info": "Filter by sender name.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "sender_name",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "session_id": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Session ID",
                                "dynamic": false,
                                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "session_id",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "template": {
                                "_input_type": "MultilineInput",
                                "advanced": true,
                                "copy_field": false,
                                "display_name": "Template",
                                "dynamic": false,
                                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "{sender_name}: {text}"
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "Memory"
                },
                "dragging": false,
                "id": "Memory-MC3g3",
                "measured": {
                    "height": 307,
                    "width": 320
                },
                "position": {
                    "x": -237.10136283763504,
                    "y": 255.8258463305314
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "RedisChatMemory-nvzNR",
                    "node": {
                        "base_classes": [
                            "Memory"
                        ],
                        "beta": false,
                        "category": "memories",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Retrieves and store chat messages from Redis.",
                        "display_name": "Redis Chat Memory",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "host",
                            "port",
                            "database",
                            "username",
                            "password",
                            "key_prefix",
                            "session_id"
                        ],
                        "frozen": false,
                        "icon": "Redis",
                        "key": "RedisChatMemory",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Memory",
                                "hidden": false,
                                "method": "build_message_history",
                                "name": "memory",
                                "required_inputs": [
                                    "database",
                                    "host",
                                    "port"
                                ],
                                "selected": "Memory",
                                "tool_mode": true,
                                "types": [
                                    "Memory"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 0.10734519514157707,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from urllib import parse\n\nfrom langchain_community.chat_message_histories.redis import RedisChatMessageHistory\n\nfrom langflow.base.memory.model import LCChatMemoryComponent\nfrom langflow.field_typing.constants import Memory\nfrom langflow.inputs import IntInput, MessageTextInput, SecretStrInput, StrInput\n\n\nclass RedisIndexChatMemory(LCChatMemoryComponent):\n    display_name = \"Redis Chat Memory\"\n    description = \"Retrieves and store chat messages from Redis.\"\n    name = \"RedisChatMemory\"\n    icon = \"Redis\"\n\n    inputs = [\n        StrInput(\n            name=\"host\", display_name=\"hostname\", required=True, value=\"localhost\", info=\"IP address or hostname.\"\n        ),\n        IntInput(name=\"port\", display_name=\"port\", required=True, value=6379, info=\"Redis Port Number.\"),\n        StrInput(name=\"database\", display_name=\"database\", required=True, value=\"0\", info=\"Redis database.\"),\n        MessageTextInput(\n            name=\"username\", display_name=\"Username\", value=\"\", info=\"The Redis user name.\", advanced=True\n        ),\n        SecretStrInput(\n            name=\"password\", display_name=\"Password\", value=\"\", info=\"The password for username.\", advanced=True\n        ),\n        StrInput(name=\"key_prefix\", display_name=\"Key prefix\", info=\"Key prefix.\", advanced=True),\n        MessageTextInput(\n            name=\"session_id\", display_name=\"Session ID\", info=\"Session ID for the message.\", advanced=True\n        ),\n    ]\n\n    def build_message_history(self) -> Memory:\n        kwargs = {}\n        password: str | None = self.password\n        if self.key_prefix:\n            kwargs[\"key_prefix\"] = self.key_prefix\n        if password:\n            password = parse.quote_plus(password)\n\n        url = f\"redis://{self.username}:{self.password}@{self.host}:{self.port}/{self.database}\"\n        return RedisChatMessageHistory(session_id=self.session_id, url=url, **kwargs)\n"
                            },
                            "database": {
                                "_input_type": "StrInput",
                                "advanced": false,
                                "display_name": "database",
                                "dynamic": false,
                                "info": "Redis database.",
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "database",
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "1"
                            },
                            "host": {
                                "_input_type": "StrInput",
                                "advanced": false,
                                "display_name": "hostname",
                                "dynamic": false,
                                "info": "IP address or hostname.",
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "host",
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "redis"
                            },
                            "key_prefix": {
                                "_input_type": "StrInput",
                                "advanced": true,
                                "display_name": "Key prefix",
                                "dynamic": false,
                                "info": "Key prefix.",
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "key_prefix",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "password": {
                                "_input_type": "SecretStrInput",
                                "advanced": true,
                                "display_name": "Password",
                                "dynamic": false,
                                "info": "The password for username.",
                                "input_types": [],
                                "load_from_db": false,
                                "name": "password",
                                "password": true,
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            },
                            "port": {
                                "_input_type": "IntInput",
                                "advanced": false,
                                "display_name": "port",
                                "dynamic": false,
                                "info": "Redis Port Number.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "port",
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": 6379
                            },
                            "session_id": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Session ID",
                                "dynamic": false,
                                "info": "Session ID for the message.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "session_id",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "username": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Username",
                                "dynamic": false,
                                "info": "The Redis user name.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "username",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "RedisChatMemory"
                },
                "dragging": false,
                "id": "RedisChatMemory-nvzNR",
                "measured": {
                    "height": 413,
                    "width": 320
                },
                "position": {
                    "x": -679.1116578301717,
                    "y": 421.65336325293714
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "StoreMessage-TYaWA",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "category": "helpers",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Stores a chat message or text into Langflow tables or an external memory.",
                        "display_name": "Message Store",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "message",
                            "memory",
                            "sender",
                            "sender_name",
                            "session_id"
                        ],
                        "frozen": false,
                        "icon": "message-square-text",
                        "key": "StoreMessage",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Stored Messages",
                                "hidden": true,
                                "method": "store_message",
                                "name": "stored_messages",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 0.51324552934843,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.custom import Component\nfrom langflow.inputs import HandleInput\nfrom langflow.inputs.inputs import MessageTextInput\nfrom langflow.memory import aget_messages, astore_message\nfrom langflow.schema.message import Message\nfrom langflow.template import Output\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI\n\n\nclass MessageStoreComponent(Component):\n    display_name = \"Message Store\"\n    description = \"Stores a chat message or text into Langflow tables or an external memory.\"\n    icon = \"message-square-text\"\n    name = \"StoreMessage\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"message\", display_name=\"Message\", info=\"The chat message to be stored.\", required=True, tool_mode=True\n        ),\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"Memory\"],\n            info=\"The external memory to store the message. If empty, it will use the Langflow tables.\",\n        ),\n        MessageTextInput(\n            name=\"sender\",\n            display_name=\"Sender\",\n            info=\"The sender of the message. Might be Machine or User. \"\n            \"If empty, the current sender parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"The name of the sender. Might be AI or User. If empty, the current sender parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            value=\"\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Stored Messages\", name=\"stored_messages\", method=\"store_message\", hidden=True),\n    ]\n\n    async def store_message(self) -> Message:\n        message = Message(text=self.message) if isinstance(self.message, str) else self.message\n\n        message.session_id = self.session_id or message.session_id\n        message.sender = self.sender or message.sender or MESSAGE_SENDER_AI\n        message.sender_name = self.sender_name or message.sender_name or MESSAGE_SENDER_NAME_AI\n\n        stored_messages: list[Message] = []\n\n        if self.memory:\n            self.memory.session_id = message.session_id\n            lc_message = message.to_lc_message()\n            await self.memory.aadd_messages([lc_message])\n\n            stored_messages = await self.memory.aget_messages() or []\n\n            stored_messages = [Message.from_lc_message(m) for m in stored_messages] if stored_messages else []\n\n            if message.sender:\n                stored_messages = [m for m in stored_messages if m.sender == message.sender]\n        else:\n            await astore_message(message, flow_id=self.graph.flow_id)\n            stored_messages = (\n                await aget_messages(\n                    session_id=message.session_id, sender_name=message.sender_name, sender=message.sender\n                )\n                or []\n            )\n\n        if not stored_messages:\n            msg = \"No messages were stored. Please ensure that the session ID and sender are properly set.\"\n            raise ValueError(msg)\n\n        stored_message = stored_messages[0]\n        self.status = stored_message\n        return stored_message\n"
                            },
                            "memory": {
                                "_input_type": "HandleInput",
                                "advanced": false,
                                "display_name": "External Memory",
                                "dynamic": false,
                                "info": "The external memory to store the message. If empty, it will use the Langflow tables.",
                                "input_types": [
                                    "Memory"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "memory",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "message": {
                                "_input_type": "MessageTextInput",
                                "advanced": false,
                                "display_name": "Message",
                                "dynamic": false,
                                "info": "The chat message to be stored.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "message",
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "tool_mode": true,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "sender": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Sender",
                                "dynamic": false,
                                "info": "The sender of the message. Might be Machine or User. If empty, the current sender parameter will be used.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "sender",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "sender_name": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Sender Name",
                                "dynamic": false,
                                "info": "The name of the sender. Might be AI or User. If empty, the current sender parameter will be used.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "sender_name",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "session_id": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Session ID",
                                "dynamic": false,
                                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "session_id",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "StoreMessage"
                },
                "dragging": false,
                "id": "StoreMessage-TYaWA",
                "measured": {
                    "height": 293,
                    "width": 320
                },
                "position": {
                    "x": 1423.8116346940042,
                    "y": 590.6416621285083
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "note-nXTBG",
                    "node": {
                        "description": "# Langflow LLM Flow with Redis Chat Memory\n\nThis flow demonstrates how to integrate **chat memory** using **Redis** with an LLM model running via **Ollama** in Langflow.\n\nThe goal is to store and retrieve conversation history, so the model can maintain context across multiple messages (multi-turn chat).\n\n---\n\n## \ud83d\udd04 How the Flow Works\n\n1. **Chat Input**  \n   - The user sends a message to the chatbot.\n\n2. **Redis Chat Memory**  \n   - Stores and retrieves past chat messages from a Redis database.\n   - Configuration:  \n     - Hostname: `redis`  \n     - Port: `6379`  \n     - Database: `1`\n\n3. **Message History**  \n   - Loads conversation history (from Redis) and provides it to the prompt.\n\n4. **Prompt Template**  \n   - Builds a dynamic prompt using:  \n     - System instructions  \n     - User message  \n     - Retrieved message history  \n   - Example Template:  \n     ```\n     You are a helpful assistant that answers questions.\n     Use markdown to format your answer, properly embedding images and urls.\n     ```\n\n5. **Ollama Node**  \n   - Sends the full prompt to a local LLM model.  \n   - Example Model: `gemma3:latest`  \n   - Returns the generated response.\n\n6. **Chat Output**  \n   - Displays the model\u2019s response in chat format.\n\n7. **Message Store**  \n   - Saves the new message and model response back into Redis (via `External Memory` connection).  \n   - This ensures that the next user message can access full chat history.\n\n---\n\n## \ud83e\udde0 Purpose\n\n- Enable **multi-turn conversations** with context retention.\n- Store conversation history externally in Redis \u2014 allowing persistence between sessions.\n- Build a chatbot that remembers what was said earlier in the conversation.\n\n---\n\n## \u26a0\ufe0f Notes\n\n- You must have a **Redis** instance running and accessible to Langflow.\n- Without Redis, the flow will not be able to retrieve or store chat memory.\n- The Prompt Template can be modified to control model tone, role, or format.\n- Memory is managed externally, not in Langflow\u2019s internal state.\n\n---\n\n## \ud83d\udcda Components Used\n\n- **Redis Chat Memory**  \n- **Message History**  \n- **Prompt**  \n- **Ollama Node**  \n- **Chat Input** / **Chat Output**  \n- **Message Store**\n\n---\n\nThis flow serves as a basic example of building a **stateful conversational agent** using Langflow + Ollama + Redis. \ud83d\ude80\n",
                        "display_name": "",
                        "documentation": "",
                        "template": {}
                    },
                    "type": "note"
                },
                "dragging": false,
                "height": 2283,
                "id": "note-nXTBG",
                "measured": {
                    "height": 2283,
                    "width": 619
                },
                "position": {
                    "x": -1447.0188763211972,
                    "y": -814.3948551101693
                },
                "resizing": false,
                "selected": false,
                "type": "noteNode",
                "width": 619
            }
        ],
        "viewport": {
            "x": 1053.3316937531886,
            "y": 491.2381235946496,
            "zoom": 0.45405734320272123
        }
    },
    "description": "Driving Innovation in Business Communication.",
    "endpoint_name": null,
    "id": "58f75035-ecec-4b9c-a81c-30ede762f4fc",
    "is_component": false,
    "last_tested_version": "1.4.3",
    "name": "Case - 2 Chat Memory",
    "tags": []
}
