{
    "data": {
        "edges": [
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "File",
                        "id": "File-vwP55",
                        "name": "data",
                        "output_types": [
                            "Data"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "data_inputs",
                        "id": "SplitText-gRXcA",
                        "inputTypes": [
                            "Data",
                            "DataFrame"
                        ],
                        "type": "other"
                    }
                },
                "id": "xy-edge__File-vwP55{\u0153dataType\u0153:\u0153File\u0153,\u0153id\u0153:\u0153File-vwP55\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-SplitText-gRXcA{\u0153fieldName\u0153:\u0153data_inputs\u0153,\u0153id\u0153:\u0153SplitText-gRXcA\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153],\u0153type\u0153:\u0153other\u0153}",
                "selected": false,
                "source": "File-vwP55",
                "sourceHandle": "{\u0153dataType\u0153:\u0153File\u0153,\u0153id\u0153:\u0153File-vwP55\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}",
                "target": "SplitText-gRXcA",
                "targetHandle": "{\u0153fieldName\u0153:\u0153data_inputs\u0153,\u0153id\u0153:\u0153SplitText-gRXcA\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153],\u0153type\u0153:\u0153other\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "ParserComponent",
                        "id": "ParserComponent-sTtYI",
                        "name": "parsed_text",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "context",
                        "id": "Prompt-LhObE",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "xy-edge__ParserComponent-sTtYI{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-sTtYI\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-LhObE{\u0153fieldName\u0153:\u0153context\u0153,\u0153id\u0153:\u0153Prompt-LhObE\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                "selected": false,
                "source": "ParserComponent-sTtYI",
                "sourceHandle": "{\u0153dataType\u0153:\u0153ParserComponent\u0153,\u0153id\u0153:\u0153ParserComponent-sTtYI\u0153,\u0153name\u0153:\u0153parsed_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "Prompt-LhObE",
                "targetHandle": "{\u0153fieldName\u0153:\u0153context\u0153,\u0153id\u0153:\u0153Prompt-LhObE\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "ChatInput",
                        "id": "ChatInput-qsO6T",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "question",
                        "id": "Prompt-LhObE",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "xy-edge__ChatInput-qsO6T{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-qsO6T\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-LhObE{\u0153fieldName\u0153:\u0153question\u0153,\u0153id\u0153:\u0153Prompt-LhObE\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                "selected": false,
                "source": "ChatInput-qsO6T",
                "sourceHandle": "{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-qsO6T\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "Prompt-LhObE",
                "targetHandle": "{\u0153fieldName\u0153:\u0153question\u0153,\u0153id\u0153:\u0153Prompt-LhObE\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "Prompt",
                        "id": "Prompt-LhObE",
                        "name": "prompt",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "OllamaModel-SNPcC",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "xy-edge__Prompt-LhObE{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-LhObE\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OllamaModel-SNPcC{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OllamaModel-SNPcC\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                "selected": false,
                "source": "Prompt-LhObE",
                "sourceHandle": "{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-LhObE\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "OllamaModel-SNPcC",
                "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OllamaModel-SNPcC\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "OllamaModel",
                        "id": "OllamaModel-SNPcC",
                        "name": "text_output",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "ChatOutput-xXjdD",
                        "inputTypes": [
                            "Data",
                            "DataFrame",
                            "Message"
                        ],
                        "type": "other"
                    }
                },
                "id": "xy-edge__OllamaModel-SNPcC{\u0153dataType\u0153:\u0153OllamaModel\u0153,\u0153id\u0153:\u0153OllamaModel-SNPcC\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-xXjdD{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-xXjdD\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}",
                "selected": false,
                "source": "OllamaModel-SNPcC",
                "sourceHandle": "{\u0153dataType\u0153:\u0153OllamaModel\u0153,\u0153id\u0153:\u0153OllamaModel-SNPcC\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "ChatOutput-xXjdD",
                "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-xXjdD\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "SplitText",
                        "id": "SplitText-gRXcA",
                        "name": "chunks",
                        "output_types": [
                            "Data"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "ingest_data",
                        "id": "LocalDB-RZPjv",
                        "inputTypes": [
                            "Data",
                            "DataFrame"
                        ],
                        "type": "other"
                    }
                },
                "id": "xy-edge__SplitText-gRXcA{\u0153dataType\u0153:\u0153SplitText\u0153,\u0153id\u0153:\u0153SplitText-gRXcA\u0153,\u0153name\u0153:\u0153chunks\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-LocalDB-RZPjv{\u0153fieldName\u0153:\u0153ingest_data\u0153,\u0153id\u0153:\u0153LocalDB-RZPjv\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153],\u0153type\u0153:\u0153other\u0153}",
                "selected": false,
                "source": "SplitText-gRXcA",
                "sourceHandle": "{\u0153dataType\u0153:\u0153SplitText\u0153,\u0153id\u0153:\u0153SplitText-gRXcA\u0153,\u0153name\u0153:\u0153chunks\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}",
                "target": "LocalDB-RZPjv",
                "targetHandle": "{\u0153fieldName\u0153:\u0153ingest_data\u0153,\u0153id\u0153:\u0153LocalDB-RZPjv\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153],\u0153type\u0153:\u0153other\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "OllamaEmbeddings",
                        "id": "OllamaEmbeddings-wrVto",
                        "name": "embeddings",
                        "output_types": [
                            "Embeddings"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "embedding",
                        "id": "LocalDB-RZPjv",
                        "inputTypes": [
                            "Embeddings"
                        ],
                        "type": "other"
                    }
                },
                "id": "xy-edge__OllamaEmbeddings-wrVto{\u0153dataType\u0153:\u0153OllamaEmbeddings\u0153,\u0153id\u0153:\u0153OllamaEmbeddings-wrVto\u0153,\u0153name\u0153:\u0153embeddings\u0153,\u0153output_types\u0153:[\u0153Embeddings\u0153]}-LocalDB-RZPjv{\u0153fieldName\u0153:\u0153embedding\u0153,\u0153id\u0153:\u0153LocalDB-RZPjv\u0153,\u0153inputTypes\u0153:[\u0153Embeddings\u0153],\u0153type\u0153:\u0153other\u0153}",
                "selected": false,
                "source": "OllamaEmbeddings-wrVto",
                "sourceHandle": "{\u0153dataType\u0153:\u0153OllamaEmbeddings\u0153,\u0153id\u0153:\u0153OllamaEmbeddings-wrVto\u0153,\u0153name\u0153:\u0153embeddings\u0153,\u0153output_types\u0153:[\u0153Embeddings\u0153]}",
                "target": "LocalDB-RZPjv",
                "targetHandle": "{\u0153fieldName\u0153:\u0153embedding\u0153,\u0153id\u0153:\u0153LocalDB-RZPjv\u0153,\u0153inputTypes\u0153:[\u0153Embeddings\u0153],\u0153type\u0153:\u0153other\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "ChatInput",
                        "id": "ChatInput-qsO6T",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "search_query",
                        "id": "LocalDB-p8ogd",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "xy-edge__ChatInput-qsO6T{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-qsO6T\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-LocalDB-p8ogd{\u0153fieldName\u0153:\u0153search_query\u0153,\u0153id\u0153:\u0153LocalDB-p8ogd\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                "selected": false,
                "source": "ChatInput-qsO6T",
                "sourceHandle": "{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-qsO6T\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "LocalDB-p8ogd",
                "targetHandle": "{\u0153fieldName\u0153:\u0153search_query\u0153,\u0153id\u0153:\u0153LocalDB-p8ogd\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "OllamaEmbeddings",
                        "id": "OllamaEmbeddings-ZBLhy",
                        "name": "embeddings",
                        "output_types": [
                            "Embeddings"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "embedding",
                        "id": "LocalDB-p8ogd",
                        "inputTypes": [
                            "Embeddings"
                        ],
                        "type": "other"
                    }
                },
                "id": "xy-edge__OllamaEmbeddings-ZBLhy{\u0153dataType\u0153:\u0153OllamaEmbeddings\u0153,\u0153id\u0153:\u0153OllamaEmbeddings-ZBLhy\u0153,\u0153name\u0153:\u0153embeddings\u0153,\u0153output_types\u0153:[\u0153Embeddings\u0153]}-LocalDB-p8ogd{\u0153fieldName\u0153:\u0153embedding\u0153,\u0153id\u0153:\u0153LocalDB-p8ogd\u0153,\u0153inputTypes\u0153:[\u0153Embeddings\u0153],\u0153type\u0153:\u0153other\u0153}",
                "selected": false,
                "source": "OllamaEmbeddings-ZBLhy",
                "sourceHandle": "{\u0153dataType\u0153:\u0153OllamaEmbeddings\u0153,\u0153id\u0153:\u0153OllamaEmbeddings-ZBLhy\u0153,\u0153name\u0153:\u0153embeddings\u0153,\u0153output_types\u0153:[\u0153Embeddings\u0153]}",
                "target": "LocalDB-p8ogd",
                "targetHandle": "{\u0153fieldName\u0153:\u0153embedding\u0153,\u0153id\u0153:\u0153LocalDB-p8ogd\u0153,\u0153inputTypes\u0153:[\u0153Embeddings\u0153],\u0153type\u0153:\u0153other\u0153}"
            },
            {
                "animated": false,
                "className": "",
                "data": {
                    "sourceHandle": {
                        "dataType": "LocalDB",
                        "id": "LocalDB-p8ogd",
                        "name": "dataframe",
                        "output_types": [
                            "DataFrame"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_data",
                        "id": "ParserComponent-sTtYI",
                        "inputTypes": [
                            "DataFrame",
                            "Data"
                        ],
                        "type": "other"
                    }
                },
                "id": "xy-edge__LocalDB-p8ogd{\u0153dataType\u0153:\u0153LocalDB\u0153,\u0153id\u0153:\u0153LocalDB-p8ogd\u0153,\u0153name\u0153:\u0153dataframe\u0153,\u0153output_types\u0153:[\u0153DataFrame\u0153]}-ParserComponent-sTtYI{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent-sTtYI\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}",
                "selected": false,
                "source": "LocalDB-p8ogd",
                "sourceHandle": "{\u0153dataType\u0153:\u0153LocalDB\u0153,\u0153id\u0153:\u0153LocalDB-p8ogd\u0153,\u0153name\u0153:\u0153dataframe\u0153,\u0153output_types\u0153:[\u0153DataFrame\u0153]}",
                "target": "ParserComponent-sTtYI",
                "targetHandle": "{\u0153fieldName\u0153:\u0153input_data\u0153,\u0153id\u0153:\u0153ParserComponent-sTtYI\u0153,\u0153inputTypes\u0153:[\u0153DataFrame\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}"
            }
        ],
        "nodes": [
            {
                "data": {
                    "id": "File-vwP55",
                    "node": {
                        "base_classes": [
                            "Data",
                            "DataFrame",
                            "Message"
                        ],
                        "beta": false,
                        "category": "data",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Load a file to be used in your project.",
                        "display_name": "File",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "path",
                            "file_path",
                            "separator",
                            "silent_errors",
                            "delete_server_file_after_processing",
                            "ignore_unsupported_extensions",
                            "ignore_unspecified_files",
                            "use_multithreading",
                            "concurrency_multithreading"
                        ],
                        "frozen": false,
                        "icon": "file-text",
                        "key": "File",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Data",
                                "hidden": false,
                                "method": "load_files",
                                "name": "data",
                                "required_inputs": [],
                                "selected": "Data",
                                "tool_mode": true,
                                "types": [
                                    "Data"
                                ],
                                "value": "__UNDEFINED__"
                            },
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "DataFrame",
                                "method": "load_dataframe",
                                "name": "dataframe",
                                "required_inputs": [],
                                "selected": "DataFrame",
                                "tool_mode": true,
                                "types": [
                                    "DataFrame"
                                ],
                                "value": "__UNDEFINED__"
                            },
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "method": "load_message",
                                "name": "message",
                                "required_inputs": [],
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 9.159206968830713e-17,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.data import BaseFileComponent\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parallel_load_data, parse_text_file_to_data\nfrom langflow.io import BoolInput, IntInput\nfrom langflow.schema import Data\n\n\nclass FileComponent(BaseFileComponent):\n    \"\"\"Handles loading and processing of individual or zipped text files.\n\n    This component supports processing multiple valid files within a zip archive,\n    resolving paths, validating file types, and optionally using multithreading for processing.\n    \"\"\"\n\n    display_name = \"File\"\n    description = \"Load a file to be used in your project.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    VALID_EXTENSIONS = TEXT_FILE_TYPES\n\n    inputs = [\n        *BaseFileComponent._base_inputs,\n        BoolInput(\n            name=\"use_multithreading\",\n            display_name=\"[Deprecated] Use Multithreading\",\n            advanced=True,\n            value=True,\n            info=\"Set 'Processing Concurrency' greater than 1 to enable multithreading.\",\n        ),\n        IntInput(\n            name=\"concurrency_multithreading\",\n            display_name=\"Processing Concurrency\",\n            advanced=True,\n            info=\"When multiple files are being processed, the number of files to process concurrently.\",\n            value=1,\n        ),\n    ]\n\n    outputs = [\n        *BaseFileComponent._base_outputs,\n    ]\n\n    def process_files(self, file_list: list[BaseFileComponent.BaseFile]) -> list[BaseFileComponent.BaseFile]:\n        \"\"\"Processes files either sequentially or in parallel, depending on concurrency settings.\n\n        Args:\n            file_list (list[BaseFileComponent.BaseFile]): List of files to process.\n\n        Returns:\n            list[BaseFileComponent.BaseFile]: Updated list of files with merged data.\n        \"\"\"\n\n        def process_file(file_path: str, *, silent_errors: bool = False) -> Data | None:\n            \"\"\"Processes a single file and returns its Data object.\"\"\"\n            try:\n                return parse_text_file_to_data(file_path, silent_errors=silent_errors)\n            except FileNotFoundError as e:\n                msg = f\"File not found: {file_path}. Error: {e}\"\n                self.log(msg)\n                if not silent_errors:\n                    raise\n                return None\n            except Exception as e:\n                msg = f\"Unexpected error processing {file_path}: {e}\"\n                self.log(msg)\n                if not silent_errors:\n                    raise\n                return None\n\n        if not file_list:\n            msg = \"No files to process.\"\n            raise ValueError(msg)\n\n        concurrency = 1 if not self.use_multithreading else max(1, self.concurrency_multithreading)\n        file_count = len(file_list)\n\n        parallel_processing_threshold = 2\n        if concurrency < parallel_processing_threshold or file_count < parallel_processing_threshold:\n            if file_count > 1:\n                self.log(f\"Processing {file_count} files sequentially.\")\n            processed_data = [process_file(str(file.path), silent_errors=self.silent_errors) for file in file_list]\n        else:\n            self.log(f\"Starting parallel processing of {file_count} files with concurrency: {concurrency}.\")\n            file_paths = [str(file.path) for file in file_list]\n            processed_data = parallel_load_data(\n                file_paths,\n                silent_errors=self.silent_errors,\n                load_function=process_file,\n                max_concurrency=concurrency,\n            )\n\n        # Use rollup_basefile_data to merge processed data with BaseFile objects\n        return self.rollup_data(file_list, processed_data)\n"
                            },
                            "concurrency_multithreading": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Processing Concurrency",
                                "dynamic": false,
                                "info": "When multiple files are being processed, the number of files to process concurrently.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "concurrency_multithreading",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": 1
                            },
                            "delete_server_file_after_processing": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Delete Server File After Processing",
                                "dynamic": false,
                                "info": "If true, the Server File Path will be deleted after processing.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "delete_server_file_after_processing",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            },
                            "file_path": {
                                "_input_type": "HandleInput",
                                "advanced": true,
                                "display_name": "Server File Path",
                                "dynamic": false,
                                "info": "Data object with a 'file_path' property pointing to server file or a Message object with a path to the file. Supercedes 'Path' but supports same file types.",
                                "input_types": [
                                    "Data",
                                    "Message"
                                ],
                                "list": true,
                                "list_add_label": "Add More",
                                "name": "file_path",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "ignore_unspecified_files": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Ignore Unspecified Files",
                                "dynamic": false,
                                "info": "If true, Data with no 'file_path' property will be ignored.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "ignore_unspecified_files",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            },
                            "ignore_unsupported_extensions": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Ignore Unsupported Extensions",
                                "dynamic": false,
                                "info": "If true, files with unsupported extensions will not be processed.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "ignore_unsupported_extensions",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            },
                            "path": {
                                "_input_type": "FileInput",
                                "advanced": false,
                                "display_name": "Files",
                                "dynamic": false,
                                "fileTypes": [
                                    "txt",
                                    "md",
                                    "mdx",
                                    "csv",
                                    "json",
                                    "yaml",
                                    "yml",
                                    "xml",
                                    "html",
                                    "htm",
                                    "pdf",
                                    "docx",
                                    "py",
                                    "sh",
                                    "sql",
                                    "js",
                                    "ts",
                                    "tsx",
                                    "zip",
                                    "tar",
                                    "tgz",
                                    "bz2",
                                    "gz"
                                ],
                                "file_path": [
                                    "fe10fcae-e4af-4c6c-b13d-8bb99ac3edc9/4189af41-f38a-4c88-9ff5-8c006ad184db.pdf"
                                ],
                                "info": "Supported file extensions: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx; optionally bundled in file extensions: zip, tar, tgz, bz2, gz",
                                "list": true,
                                "list_add_label": "Add More",
                                "name": "path",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "temp_file": false,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "file",
                                "value": ""
                            },
                            "separator": {
                                "_input_type": "StrInput",
                                "advanced": true,
                                "display_name": "Separator",
                                "dynamic": false,
                                "info": "Specify the separator to use between multiple outputs in Message format.",
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "separator",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "\n\n"
                            },
                            "silent_errors": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Silent Errors",
                                "dynamic": false,
                                "info": "If true, errors will not raise an exception.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "silent_errors",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            },
                            "use_multithreading": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "[Deprecated] Use Multithreading",
                                "dynamic": false,
                                "info": "Set 'Processing Concurrency' greater than 1 to enable multithreading.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "use_multithreading",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "File"
                },
                "dragging": false,
                "id": "File-vwP55",
                "measured": {
                    "height": 339,
                    "width": 320
                },
                "position": {
                    "x": -465.8365029034157,
                    "y": 27.070154757262138
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "SplitText-gRXcA",
                    "node": {
                        "base_classes": [
                            "Data",
                            "DataFrame"
                        ],
                        "beta": false,
                        "category": "processing",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Split text into chunks based on specified criteria.",
                        "display_name": "Split Text",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "data_inputs",
                            "chunk_overlap",
                            "chunk_size",
                            "separator",
                            "text_key",
                            "keep_separator"
                        ],
                        "frozen": false,
                        "icon": "scissors-line-dashed",
                        "key": "SplitText",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Chunks",
                                "hidden": false,
                                "method": "split_text",
                                "name": "chunks",
                                "selected": "Data",
                                "tool_mode": true,
                                "types": [
                                    "Data"
                                ],
                                "value": "__UNDEFINED__"
                            },
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "DataFrame",
                                "method": "as_dataframe",
                                "name": "dataframe",
                                "selected": "DataFrame",
                                "tool_mode": true,
                                "types": [
                                    "DataFrame"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 0.0006561452663029057,
                        "template": {
                            "_type": "Component",
                            "chunk_overlap": {
                                "_input_type": "IntInput",
                                "advanced": false,
                                "display_name": "Chunk Overlap",
                                "dynamic": false,
                                "info": "Number of characters to overlap between chunks.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "chunk_overlap",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": 200
                            },
                            "chunk_size": {
                                "_input_type": "IntInput",
                                "advanced": false,
                                "display_name": "Chunk Size",
                                "dynamic": false,
                                "info": "The maximum length of each chunk. Text is first split by separator, then chunks are merged up to this size. Individual splits larger than this won't be further divided.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "chunk_size",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": 1000
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langchain_text_splitters import CharacterTextSplitter\n\nfrom langflow.custom import Component\nfrom langflow.io import DropdownInput, HandleInput, IntInput, MessageTextInput, Output\nfrom langflow.schema import Data, DataFrame\nfrom langflow.utils.util import unescape_string\n\n\nclass SplitTextComponent(Component):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks based on specified criteria.\"\n    icon = \"scissors-line-dashed\"\n    name = \"SplitText\"\n\n    inputs = [\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data or DataFrame\",\n            info=\"The data with texts to split in chunks.\",\n            input_types=[\"Data\", \"DataFrame\"],\n            required=True,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"Number of characters to overlap between chunks.\",\n            value=200,\n        ),\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=(\n                \"The maximum length of each chunk. Text is first split by separator, \"\n                \"then chunks are merged up to this size. \"\n                \"Individual splits larger than this won't be further divided.\"\n            ),\n            value=1000,\n        ),\n        MessageTextInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            info=(\n                \"The character to split on. Use \\\\n for newline. \"\n                \"Examples: \\\\n\\\\n for paragraphs, \\\\n for lines, . for sentences\"\n            ),\n            value=\"\\n\",\n        ),\n        MessageTextInput(\n            name=\"text_key\",\n            display_name=\"Text Key\",\n            info=\"The key to use for the text column.\",\n            value=\"text\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"keep_separator\",\n            display_name=\"Keep Separator\",\n            info=\"Whether to keep the separator in the output chunks and where to place it.\",\n            options=[\"False\", \"True\", \"Start\", \"End\"],\n            value=\"False\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def _docs_to_data(self, docs) -> list[Data]:\n        return [Data(text=doc.page_content, data=doc.metadata) for doc in docs]\n\n    def _fix_separator(self, separator: str) -> str:\n        \"\"\"Fix common separator issues and convert to proper format.\"\"\"\n        if separator == \"/n\":\n            return \"\\n\"\n        if separator == \"/t\":\n            return \"\\t\"\n        return separator\n\n    def split_text_base(self):\n        separator = self._fix_separator(self.separator)\n        separator = unescape_string(separator)\n\n        if isinstance(self.data_inputs, DataFrame):\n            if not len(self.data_inputs):\n                msg = \"DataFrame is empty\"\n                raise TypeError(msg)\n\n            self.data_inputs.text_key = self.text_key\n            try:\n                documents = self.data_inputs.to_lc_documents()\n            except Exception as e:\n                msg = f\"Error converting DataFrame to documents: {e}\"\n                raise TypeError(msg) from e\n        else:\n            if not self.data_inputs:\n                msg = \"No data inputs provided\"\n                raise TypeError(msg)\n\n            documents = []\n            if isinstance(self.data_inputs, Data):\n                self.data_inputs.text_key = self.text_key\n                documents = [self.data_inputs.to_lc_document()]\n            else:\n                try:\n                    documents = [input_.to_lc_document() for input_ in self.data_inputs if isinstance(input_, Data)]\n                    if not documents:\n                        msg = f\"No valid Data inputs found in {type(self.data_inputs)}\"\n                        raise TypeError(msg)\n                except AttributeError as e:\n                    msg = f\"Invalid input type in collection: {e}\"\n                    raise TypeError(msg) from e\n        try:\n            # Convert string 'False'/'True' to boolean\n            keep_sep = self.keep_separator\n            if isinstance(keep_sep, str):\n                if keep_sep.lower() == \"false\":\n                    keep_sep = False\n                elif keep_sep.lower() == \"true\":\n                    keep_sep = True\n                # 'start' and 'end' are kept as strings\n\n            splitter = CharacterTextSplitter(\n                chunk_overlap=self.chunk_overlap,\n                chunk_size=self.chunk_size,\n                separator=separator,\n                keep_separator=keep_sep,\n            )\n            return splitter.split_documents(documents)\n        except Exception as e:\n            msg = f\"Error splitting text: {e}\"\n            raise TypeError(msg) from e\n\n    def split_text(self) -> list[Data]:\n        return self._docs_to_data(self.split_text_base())\n\n    def as_dataframe(self) -> DataFrame:\n        return DataFrame(self.split_text())\n"
                            },
                            "data_inputs": {
                                "_input_type": "HandleInput",
                                "advanced": false,
                                "display_name": "Data or DataFrame",
                                "dynamic": false,
                                "info": "The data with texts to split in chunks.",
                                "input_types": [
                                    "Data",
                                    "DataFrame"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "data_inputs",
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "keep_separator": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Keep Separator",
                                "dynamic": false,
                                "info": "Whether to keep the separator in the output chunks and where to place it.",
                                "name": "keep_separator",
                                "options": [
                                    "False",
                                    "True",
                                    "Start",
                                    "End"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "False"
                            },
                            "separator": {
                                "_input_type": "MessageTextInput",
                                "advanced": false,
                                "display_name": "Separator",
                                "dynamic": false,
                                "info": "The character to split on. Use \\n for newline. Examples: \\n\\n for paragraphs, \\n for lines, . for sentences",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "separator",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "\n"
                            },
                            "text_key": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Text Key",
                                "dynamic": false,
                                "info": "The key to use for the text column.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "text_key",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "text"
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "SplitText"
                },
                "dragging": false,
                "id": "SplitText-gRXcA",
                "measured": {
                    "height": 505,
                    "width": 320
                },
                "position": {
                    "x": -76.38983262124005,
                    "y": 22.1236069186493
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "OllamaEmbeddings-wrVto",
                    "node": {
                        "base_classes": [
                            "Embeddings"
                        ],
                        "beta": false,
                        "category": "embeddings",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Generate embeddings using Ollama models.",
                        "display_name": "Ollama Embeddings",
                        "documentation": "https://python.langchain.com/docs/integrations/text_embedding/ollama",
                        "edited": false,
                        "field_order": [
                            "model_name",
                            "base_url"
                        ],
                        "frozen": false,
                        "icon": "Ollama",
                        "key": "OllamaEmbeddings",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Embeddings",
                                "hidden": false,
                                "method": "build_embeddings",
                                "name": "embeddings",
                                "options": null,
                                "required_inputs": null,
                                "selected": "Embeddings",
                                "tool_mode": true,
                                "types": [
                                    "Embeddings"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 0.007568328950209746,
                        "template": {
                            "_type": "Component",
                            "base_url": {
                                "_input_type": "MessageTextInput",
                                "advanced": false,
                                "display_name": "Ollama Base URL",
                                "dynamic": false,
                                "info": "",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "base_url",
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "http://host.docker.internal:11434"
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from typing import Any\nfrom urllib.parse import urljoin\n\nimport httpx\nfrom langchain_ollama import OllamaEmbeddings\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.ollama_constants import OLLAMA_EMBEDDING_MODELS, URL_LIST\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import DropdownInput, MessageTextInput, Output\n\nHTTP_STATUS_OK = 200\n\n\nclass OllamaEmbeddingsComponent(LCModelComponent):\n    display_name: str = \"Ollama Embeddings\"\n    description: str = \"Generate embeddings using Ollama models.\"\n    documentation = \"https://python.langchain.com/docs/integrations/text_embedding/ollama\"\n    icon = \"Ollama\"\n    name = \"OllamaEmbeddings\"\n\n    inputs = [\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Ollama Model\",\n            value=\"\",\n            options=[],\n            real_time_refresh=True,\n            refresh_button=True,\n            combobox=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Ollama Base URL\",\n            value=\"\",\n            required=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        try:\n            output = OllamaEmbeddings(model=self.model_name, base_url=self.base_url)\n        except Exception as e:\n            msg = (\n                \"Unable to connect to the Ollama API. \",\n                \"Please verify the base URL, ensure the relevant Ollama model is pulled, and try again.\",\n            )\n            raise ValueError(msg) from e\n        return output\n\n    async def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name in {\"base_url\", \"model_name\"} and not await self.is_valid_ollama_url(field_value):\n            # Check if any URL in the list is valid\n            valid_url = \"\"\n            for url in URL_LIST:\n                if await self.is_valid_ollama_url(url):\n                    valid_url = url\n                    break\n            build_config[\"base_url\"][\"value\"] = valid_url\n        if field_name in {\"model_name\", \"base_url\", \"tool_model_enabled\"}:\n            if await self.is_valid_ollama_url(self.base_url):\n                build_config[\"model_name\"][\"options\"] = await self.get_model(self.base_url)\n            elif await self.is_valid_ollama_url(build_config[\"base_url\"].get(\"value\", \"\")):\n                build_config[\"model_name\"][\"options\"] = await self.get_model(build_config[\"base_url\"].get(\"value\", \"\"))\n            else:\n                build_config[\"model_name\"][\"options\"] = []\n\n        return build_config\n\n    async def get_model(self, base_url_value: str) -> list[str]:\n        \"\"\"Get the model names from Ollama.\"\"\"\n        model_ids = []\n        try:\n            url = urljoin(base_url_value, \"/api/tags\")\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url)\n                response.raise_for_status()\n                data = response.json()\n\n            model_ids = [model[\"name\"] for model in data.get(\"models\", [])]\n            # this to ensure that not embedding models are included.\n            # not even the base models since models can have 1b 2b etc\n            # handles cases when embeddings models have tags like :latest - etc.\n            model_ids = [\n                model\n                for model in model_ids\n                if any(model.startswith(f\"{embedding_model}\") for embedding_model in OLLAMA_EMBEDDING_MODELS)\n            ]\n\n        except (ImportError, ValueError, httpx.RequestError) as e:\n            msg = \"Could not get model names from Ollama.\"\n            raise ValueError(msg) from e\n\n        return model_ids\n\n    async def is_valid_ollama_url(self, url: str) -> bool:\n        try:\n            async with httpx.AsyncClient() as client:\n                return (await client.get(f\"{url}/api/tags\")).status_code == HTTP_STATUS_OK\n        except httpx.RequestError:\n            return False\n"
                            },
                            "model_name": {
                                "_input_type": "DropdownInput",
                                "advanced": false,
                                "combobox": true,
                                "dialog_inputs": {},
                                "display_name": "Ollama Model",
                                "dynamic": false,
                                "info": "",
                                "name": "model_name",
                                "options": [
                                    "snowflake-arctic-embed2:latest"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "refresh_button": true,
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "snowflake-arctic-embed2:latest"
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "OllamaEmbeddings"
                },
                "dragging": false,
                "id": "OllamaEmbeddings-wrVto",
                "measured": {
                    "height": 311,
                    "width": 320
                },
                "position": {
                    "x": -70.64634084625483,
                    "y": 536.740469957321
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "ChatInput-qsO6T",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "category": "inputs",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Get chat inputs from the Playground.",
                        "display_name": "Chat Input",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "input_value",
                            "should_store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "files",
                            "background_color",
                            "chat_icon",
                            "text_color"
                        ],
                        "frozen": false,
                        "icon": "MessagesSquare",
                        "key": "ChatInput",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": true,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "method": "message_response",
                                "name": "message",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 0.11021706158346227,
                        "template": {
                            "_type": "Component",
                            "background_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Background Color",
                                "dynamic": false,
                                "info": "The background color of the icon.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "background_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "chat_icon": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Icon",
                                "dynamic": false,
                                "info": "The icon of the message.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "chat_icon",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                            },
                            "files": {
                                "_input_type": "FileInput",
                                "advanced": true,
                                "display_name": "Files",
                                "dynamic": false,
                                "fileTypes": [
                                    "txt",
                                    "md",
                                    "mdx",
                                    "csv",
                                    "json",
                                    "yaml",
                                    "yml",
                                    "xml",
                                    "html",
                                    "htm",
                                    "pdf",
                                    "docx",
                                    "py",
                                    "sh",
                                    "sql",
                                    "js",
                                    "ts",
                                    "tsx",
                                    "jpg",
                                    "jpeg",
                                    "png",
                                    "bmp",
                                    "image"
                                ],
                                "file_path": "",
                                "info": "Files to be sent with the message.",
                                "list": true,
                                "list_add_label": "Add More",
                                "name": "files",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "temp_file": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "file",
                                "value": ""
                            },
                            "input_value": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "Text",
                                "dynamic": false,
                                "info": "Message to be passed as input.",
                                "input_types": [],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "sender": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Sender Type",
                                "dynamic": false,
                                "info": "Type of sender.",
                                "name": "sender",
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "User"
                            },
                            "sender_name": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Sender Name",
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "sender_name",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "User"
                            },
                            "session_id": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Session ID",
                                "dynamic": false,
                                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "session_id",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "should_store_message": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Store Messages",
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "should_store_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            },
                            "text_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Text Color",
                                "dynamic": false,
                                "info": "The text color of the name",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "text_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": false,
                    "type": "ChatInput"
                },
                "dragging": false,
                "id": "ChatInput-qsO6T",
                "measured": {
                    "height": 66,
                    "width": 192
                },
                "position": {
                    "x": -473.3348576933605,
                    "y": 1476.9222921480182
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "OllamaEmbeddings-ZBLhy",
                    "node": {
                        "base_classes": [
                            "Embeddings"
                        ],
                        "beta": false,
                        "category": "embeddings",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Generate embeddings using Ollama models.",
                        "display_name": "Ollama Embeddings",
                        "documentation": "https://python.langchain.com/docs/integrations/text_embedding/ollama",
                        "edited": false,
                        "field_order": [
                            "model_name",
                            "base_url"
                        ],
                        "frozen": false,
                        "icon": "Ollama",
                        "key": "OllamaEmbeddings",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Embeddings",
                                "hidden": false,
                                "method": "build_embeddings",
                                "name": "embeddings",
                                "options": null,
                                "required_inputs": null,
                                "selected": "Embeddings",
                                "tool_mode": true,
                                "types": [
                                    "Embeddings"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 0.007568328950209746,
                        "template": {
                            "_type": "Component",
                            "base_url": {
                                "_input_type": "MessageTextInput",
                                "advanced": false,
                                "display_name": "Ollama Base URL",
                                "dynamic": false,
                                "info": "",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "base_url",
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "http://host.docker.internal:11434"
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from typing import Any\nfrom urllib.parse import urljoin\n\nimport httpx\nfrom langchain_ollama import OllamaEmbeddings\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.ollama_constants import OLLAMA_EMBEDDING_MODELS, URL_LIST\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import DropdownInput, MessageTextInput, Output\n\nHTTP_STATUS_OK = 200\n\n\nclass OllamaEmbeddingsComponent(LCModelComponent):\n    display_name: str = \"Ollama Embeddings\"\n    description: str = \"Generate embeddings using Ollama models.\"\n    documentation = \"https://python.langchain.com/docs/integrations/text_embedding/ollama\"\n    icon = \"Ollama\"\n    name = \"OllamaEmbeddings\"\n\n    inputs = [\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Ollama Model\",\n            value=\"\",\n            options=[],\n            real_time_refresh=True,\n            refresh_button=True,\n            combobox=True,\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Ollama Base URL\",\n            value=\"\",\n            required=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        try:\n            output = OllamaEmbeddings(model=self.model_name, base_url=self.base_url)\n        except Exception as e:\n            msg = (\n                \"Unable to connect to the Ollama API. \",\n                \"Please verify the base URL, ensure the relevant Ollama model is pulled, and try again.\",\n            )\n            raise ValueError(msg) from e\n        return output\n\n    async def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name in {\"base_url\", \"model_name\"} and not await self.is_valid_ollama_url(field_value):\n            # Check if any URL in the list is valid\n            valid_url = \"\"\n            for url in URL_LIST:\n                if await self.is_valid_ollama_url(url):\n                    valid_url = url\n                    break\n            build_config[\"base_url\"][\"value\"] = valid_url\n        if field_name in {\"model_name\", \"base_url\", \"tool_model_enabled\"}:\n            if await self.is_valid_ollama_url(self.base_url):\n                build_config[\"model_name\"][\"options\"] = await self.get_model(self.base_url)\n            elif await self.is_valid_ollama_url(build_config[\"base_url\"].get(\"value\", \"\")):\n                build_config[\"model_name\"][\"options\"] = await self.get_model(build_config[\"base_url\"].get(\"value\", \"\"))\n            else:\n                build_config[\"model_name\"][\"options\"] = []\n\n        return build_config\n\n    async def get_model(self, base_url_value: str) -> list[str]:\n        \"\"\"Get the model names from Ollama.\"\"\"\n        model_ids = []\n        try:\n            url = urljoin(base_url_value, \"/api/tags\")\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url)\n                response.raise_for_status()\n                data = response.json()\n\n            model_ids = [model[\"name\"] for model in data.get(\"models\", [])]\n            # this to ensure that not embedding models are included.\n            # not even the base models since models can have 1b 2b etc\n            # handles cases when embeddings models have tags like :latest - etc.\n            model_ids = [\n                model\n                for model in model_ids\n                if any(model.startswith(f\"{embedding_model}\") for embedding_model in OLLAMA_EMBEDDING_MODELS)\n            ]\n\n        except (ImportError, ValueError, httpx.RequestError) as e:\n            msg = \"Could not get model names from Ollama.\"\n            raise ValueError(msg) from e\n\n        return model_ids\n\n    async def is_valid_ollama_url(self, url: str) -> bool:\n        try:\n            async with httpx.AsyncClient() as client:\n                return (await client.get(f\"{url}/api/tags\")).status_code == HTTP_STATUS_OK\n        except httpx.RequestError:\n            return False\n"
                            },
                            "model_name": {
                                "_input_type": "DropdownInput",
                                "advanced": false,
                                "combobox": true,
                                "dialog_inputs": {},
                                "display_name": "Ollama Model",
                                "dynamic": false,
                                "info": "",
                                "name": "model_name",
                                "options": [
                                    "snowflake-arctic-embed2:latest"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "refresh_button": true,
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "snowflake-arctic-embed2:latest"
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "OllamaEmbeddings"
                },
                "dragging": false,
                "id": "OllamaEmbeddings-ZBLhy",
                "measured": {
                    "height": 311,
                    "width": 320
                },
                "position": {
                    "x": -517.4992662723236,
                    "y": 1925.3009631548657
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "ParserComponent-sTtYI",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "category": "processing",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Format a DataFrame or Data object into text using a template. Enable 'Stringify' to convert input into a readable string instead.",
                        "display_name": "Parser",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "mode",
                            "pattern",
                            "input_data",
                            "sep"
                        ],
                        "frozen": false,
                        "icon": "braces",
                        "key": "ParserComponent",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Parsed Text",
                                "hidden": false,
                                "method": "parse_combined_text",
                                "name": "parsed_text",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 2.220446049250313e-16,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "import json\nfrom typing import Any\n\nfrom langflow.custom import Component\nfrom langflow.io import (\n    BoolInput,\n    HandleInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n    TabInput,\n)\nfrom langflow.schema import Data, DataFrame\nfrom langflow.schema.message import Message\n\n\nclass ParserComponent(Component):\n    display_name = \"Parser\"\n    description = (\n        \"Format a DataFrame or Data object into text using a template. \"\n        \"Enable 'Stringify' to convert input into a readable string instead.\"\n    )\n    icon = \"braces\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Parser\", \"Stringify\"],\n            value=\"Parser\",\n            info=\"Convert into raw string instead of using a template.\",\n            real_time_refresh=True,\n        ),\n        MultilineInput(\n            name=\"pattern\",\n            display_name=\"Template\",\n            info=(\n                \"Use variables within curly brackets to extract column values for DataFrames \"\n                \"or key values for Data.\"\n                \"For example: `Name: {Name}, Age: {Age}, Country: {Country}`\"\n            ),\n            value=\"Text: {text}\",  # Example default\n            dynamic=True,\n            show=True,\n            required=True,\n        ),\n        HandleInput(\n            name=\"input_data\",\n            display_name=\"Data or DataFrame\",\n            input_types=[\"DataFrame\", \"Data\"],\n            info=\"Accepts either a DataFrame or a Data object.\",\n            required=True,\n        ),\n        MessageTextInput(\n            name=\"sep\",\n            display_name=\"Separator\",\n            advanced=True,\n            value=\"\\n\",\n            info=\"String used to separate rows/items.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Parsed Text\",\n            name=\"parsed_text\",\n            info=\"Formatted text output.\",\n            method=\"parse_combined_text\",\n        ),\n    ]\n\n    def update_build_config(self, build_config, field_value, field_name=None):\n        \"\"\"Dynamically hide/show `template` and enforce requirement based on `stringify`.\"\"\"\n        if field_name == \"mode\":\n            build_config[\"pattern\"][\"show\"] = self.mode == \"Parser\"\n            build_config[\"pattern\"][\"required\"] = self.mode == \"Parser\"\n            if field_value:\n                clean_data = BoolInput(\n                    name=\"clean_data\",\n                    display_name=\"Clean Data\",\n                    info=(\n                        \"Enable to clean the data by removing empty rows and lines \"\n                        \"in each cell of the DataFrame/ Data object.\"\n                    ),\n                    value=True,\n                    advanced=True,\n                    required=False,\n                )\n                build_config[\"clean_data\"] = clean_data.to_dict()\n            else:\n                build_config.pop(\"clean_data\", None)\n\n        return build_config\n\n    def _clean_args(self):\n        \"\"\"Prepare arguments based on input type.\"\"\"\n        input_data = self.input_data\n\n        match input_data:\n            case list() if all(isinstance(item, Data) for item in input_data):\n                msg = \"List of Data objects is not supported.\"\n                raise ValueError(msg)\n            case DataFrame():\n                return input_data, None\n            case Data():\n                return None, input_data\n            case dict() if \"data\" in input_data:\n                try:\n                    if \"columns\" in input_data:  # Likely a DataFrame\n                        return DataFrame.from_dict(input_data), None\n                    # Likely a Data object\n                    return None, Data(**input_data)\n                except (TypeError, ValueError, KeyError) as e:\n                    msg = f\"Invalid structured input provided: {e!s}\"\n                    raise ValueError(msg) from e\n            case _:\n                msg = f\"Unsupported input type: {type(input_data)}. Expected DataFrame or Data.\"\n                raise ValueError(msg)\n\n    def parse_combined_text(self) -> Message:\n        \"\"\"Parse all rows/items into a single text or convert input to string if `stringify` is enabled.\"\"\"\n        # Early return for stringify option\n        if self.mode == \"Stringify\":\n            return self.convert_to_string()\n\n        df, data = self._clean_args()\n\n        lines = []\n        if df is not None:\n            for _, row in df.iterrows():\n                formatted_text = self.pattern.format(**row.to_dict())\n                lines.append(formatted_text)\n        elif data is not None:\n            formatted_text = self.pattern.format(**data.data)\n            lines.append(formatted_text)\n\n        combined_text = self.sep.join(lines)\n        self.status = combined_text\n        return Message(text=combined_text)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                return json.dumps(data.data)\n            if isinstance(data, DataFrame):\n                if hasattr(self, \"clean_data\") and self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n                return data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> Message:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        result = \"\"\n        if isinstance(self.input_data, list):\n            result = \"\\n\".join([self._safe_convert(item) for item in self.input_data])\n        else:\n            result = self._safe_convert(self.input_data)\n        self.log(f\"Converted to string with length: {len(result)}\")\n\n        message = Message(text=result)\n        self.status = message\n        return message\n"
                            },
                            "input_data": {
                                "_input_type": "HandleInput",
                                "advanced": false,
                                "display_name": "Data or DataFrame",
                                "dynamic": false,
                                "info": "Accepts either a DataFrame or a Data object.",
                                "input_types": [
                                    "DataFrame",
                                    "Data"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "input_data",
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "mode": {
                                "_input_type": "TabInput",
                                "advanced": false,
                                "display_name": "Mode",
                                "dynamic": false,
                                "info": "Convert into raw string instead of using a template.",
                                "name": "mode",
                                "options": [
                                    "Parser",
                                    "Stringify"
                                ],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "tab",
                                "value": "Parser"
                            },
                            "pattern": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "Template",
                                "dynamic": true,
                                "info": "Use variables within curly brackets to extract column values for DataFrames or key values for Data.For example: `Name: {Name}, Age: {Age}, Country: {Country}`",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "pattern",
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Text: {text}"
                            },
                            "sep": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Separator",
                                "dynamic": false,
                                "info": "String used to separate rows/items.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "sep",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "\n"
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "ParserComponent"
                },
                "dragging": false,
                "id": "ParserComponent-sTtYI",
                "measured": {
                    "height": 393,
                    "width": 320
                },
                "position": {
                    "x": 330.084382630334,
                    "y": 1835.834730022695
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "Prompt-LhObE",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {
                            "template": [
                                "question",
                                "context"
                            ]
                        },
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "documentation": "",
                        "edited": false,
                        "error": null,
                        "field_order": [
                            "template",
                            "tool_placeholder"
                        ],
                        "frozen": false,
                        "full_path": null,
                        "icon": "prompts",
                        "is_composition": null,
                        "is_input": null,
                        "is_output": null,
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "name": "",
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Prompt Message",
                                "hidden": false,
                                "method": "build_prompt",
                                "name": "prompt",
                                "options": null,
                                "required_inputs": null,
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "priority": null,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                            },
                            "context": {
                                "advanced": false,
                                "display_name": "context",
                                "dynamic": false,
                                "field_type": "str",
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "context",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            },
                            "question": {
                                "advanced": false,
                                "display_name": "question",
                                "dynamic": false,
                                "field_type": "str",
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "question",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "type": "str",
                                "value": ""
                            },
                            "template": {
                                "_input_type": "PromptInput",
                                "advanced": false,
                                "display_name": "Template",
                                "dynamic": false,
                                "info": "",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "type": "prompt",
                                "value": "{question}\n\n---\n\nGive the context above, answer the question as best as possibe.\n\n{context}"
                            },
                            "tool_placeholder": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Tool Placeholder",
                                "dynamic": false,
                                "info": "A placeholder input for tool mode.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "tool_placeholder",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": true,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "Prompt"
                },
                "dragging": false,
                "id": "Prompt-LhObE",
                "measured": {
                    "height": 493,
                    "width": 320
                },
                "position": {
                    "x": 722.5689382236973,
                    "y": 1132.8741483870983
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "OllamaModel-SNPcC",
                    "node": {
                        "base_classes": [
                            "LanguageModel",
                            "Message"
                        ],
                        "beta": false,
                        "category": "models",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Generate text using Ollama Local LLMs.",
                        "display_name": "Ollama",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "base_url",
                            "model_name",
                            "temperature",
                            "format",
                            "metadata",
                            "mirostat",
                            "mirostat_eta",
                            "mirostat_tau",
                            "num_ctx",
                            "num_gpu",
                            "num_thread",
                            "repeat_last_n",
                            "repeat_penalty",
                            "tfs_z",
                            "timeout",
                            "top_k",
                            "top_p",
                            "verbose",
                            "tags",
                            "stop_tokens",
                            "system",
                            "tool_model_enabled",
                            "template",
                            "input_value",
                            "system_message",
                            "stream"
                        ],
                        "frozen": false,
                        "icon": "Ollama",
                        "key": "OllamaModel",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "hidden": false,
                                "method": "text_response",
                                "name": "text_output",
                                "options": null,
                                "required_inputs": [],
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            },
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Language Model",
                                "method": "build_model",
                                "name": "model_output",
                                "options": null,
                                "required_inputs": [],
                                "selected": "LanguageModel",
                                "tool_mode": true,
                                "types": [
                                    "LanguageModel"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 1.1514907767935298e-16,
                        "template": {
                            "_type": "Component",
                            "base_url": {
                                "_input_type": "MessageTextInput",
                                "advanced": false,
                                "display_name": "Base URL",
                                "dynamic": false,
                                "info": "Endpoint of the Ollama API.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "base_url",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "http://host.docker.internal:11434"
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "import asyncio\nfrom typing import Any\nfrom urllib.parse import urljoin\n\nimport httpx\nfrom langchain_ollama import ChatOllama\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.ollama_constants import OLLAMA_TOOL_MODELS_BASE, URL_LIST\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SliderInput\nfrom langflow.logging import logger\n\nHTTP_STATUS_OK = 200\n\n\nclass ChatOllamaComponent(LCModelComponent):\n    display_name = \"Ollama\"\n    description = \"Generate text using Ollama Local LLMs.\"\n    icon = \"Ollama\"\n    name = \"OllamaModel\"\n\n    # Define constants for JSON keys\n    JSON_MODELS_KEY = \"models\"\n    JSON_NAME_KEY = \"name\"\n    JSON_CAPABILITIES_KEY = \"capabilities\"\n    DESIRED_CAPABILITY = \"completion\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"Endpoint of the Ollama API.\",\n            value=\"\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            options=[],\n            info=\"Refer to https://ollama.com/library for more models.\",\n            refresh_button=True,\n            real_time_refresh=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"format\", display_name=\"Format\", info=\"Specify the format of the output (e.g., json).\", advanced=True\n        ),\n        DictInput(name=\"metadata\", display_name=\"Metadata\", info=\"Metadata to add to the run trace.\", advanced=True),\n        DropdownInput(\n            name=\"mirostat\",\n            display_name=\"Mirostat\",\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\n            value=\"Disabled\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        FloatInput(\n            name=\"mirostat_eta\",\n            display_name=\"Mirostat Eta\",\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_tau\",\n            display_name=\"Mirostat Tau\",\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_ctx\",\n            display_name=\"Context Window Size\",\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_gpu\",\n            display_name=\"Number of GPUs\",\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_thread\",\n            display_name=\"Number of Threads\",\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"repeat_last_n\",\n            display_name=\"Repeat Last N\",\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"repeat_penalty\",\n            display_name=\"Repeat Penalty\",\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\n            advanced=True,\n        ),\n        FloatInput(name=\"tfs_z\", display_name=\"TFS Z\", info=\"Tail free sampling value. (Default: 1)\", advanced=True),\n        IntInput(name=\"timeout\", display_name=\"Timeout\", info=\"Timeout for the request stream.\", advanced=True),\n        IntInput(\n            name=\"top_k\", display_name=\"Top K\", info=\"Limits token selection to top K. (Default: 40)\", advanced=True\n        ),\n        FloatInput(name=\"top_p\", display_name=\"Top P\", info=\"Works together with top-k. (Default: 0.9)\", advanced=True),\n        BoolInput(name=\"verbose\", display_name=\"Verbose\", info=\"Whether to print out response text.\", advanced=True),\n        MessageTextInput(\n            name=\"tags\",\n            display_name=\"Tags\",\n            info=\"Comma-separated list of tags to add to the run trace.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"stop_tokens\",\n            display_name=\"Stop Tokens\",\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"system\", display_name=\"System\", info=\"System to use for generating text.\", advanced=True\n        ),\n        BoolInput(\n            name=\"tool_model_enabled\",\n            display_name=\"Tool Model Enabled\",\n            info=\"Whether to enable tool calling in the model.\",\n            value=False,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"template\", display_name=\"Template\", info=\"Template to use for generating text.\", advanced=True\n        ),\n        *LCModelComponent._base_inputs,\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(self.mirostat, 0)\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n        else:\n            mirostat_eta = self.mirostat_eta\n            mirostat_tau = self.mirostat_tau\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": self.base_url,\n            \"model\": self.model_name,\n            \"mirostat\": mirostat_value,\n            \"format\": self.format,\n            \"metadata\": self.metadata,\n            \"tags\": self.tags.split(\",\") if self.tags else None,\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": self.num_ctx or None,\n            \"num_gpu\": self.num_gpu or None,\n            \"num_thread\": self.num_thread or None,\n            \"repeat_last_n\": self.repeat_last_n or None,\n            \"repeat_penalty\": self.repeat_penalty or None,\n            \"temperature\": self.temperature or None,\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\n            \"system\": self.system,\n            \"tfs_z\": self.tfs_z or None,\n            \"timeout\": self.timeout or None,\n            \"top_k\": self.top_k or None,\n            \"top_p\": self.top_p or None,\n            \"verbose\": self.verbose,\n            \"template\": self.template,\n        }\n\n        # Remove parameters with None values\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)\n        except Exception as e:\n            msg = (\n                \"Unable to connect to the Ollama API. \",\n                \"Please verify the base URL, ensure the relevant Ollama model is pulled, and try again.\",\n            )\n            raise ValueError(msg) from e\n\n        return output\n\n    async def is_valid_ollama_url(self, url: str) -> bool:\n        try:\n            async with httpx.AsyncClient() as client:\n                return (await client.get(urljoin(url, \"api/tags\"))).status_code == HTTP_STATUS_OK\n        except httpx.RequestError:\n            return False\n\n    async def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name == \"mirostat\":\n            if field_value == \"Disabled\":\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\n                build_config[\"mirostat_eta\"][\"value\"] = None\n                build_config[\"mirostat_tau\"][\"value\"] = None\n\n            else:\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\n\n                if field_value == \"Mirostat 2.0\":\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\n                else:\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\n\n        if field_name in {\"base_url\", \"model_name\"}:\n            if build_config[\"base_url\"].get(\"load_from_db\", False):\n                base_url_value = await self.get_variables(build_config[\"base_url\"].get(\"value\", \"\"), \"base_url\")\n            else:\n                base_url_value = build_config[\"base_url\"].get(\"value\", \"\")\n\n            if not await self.is_valid_ollama_url(base_url_value):\n                # Check if any URL in the list is valid\n                valid_url = \"\"\n                check_urls = URL_LIST\n                if self.base_url:\n                    check_urls = [self.base_url, *URL_LIST]\n                for url in check_urls:\n                    if await self.is_valid_ollama_url(url):\n                        valid_url = url\n                        break\n                if valid_url != \"\":\n                    build_config[\"base_url\"][\"value\"] = valid_url\n                else:\n                    msg = \"No valid Ollama URL found.\"\n                    raise ValueError(msg)\n        if field_name in {\"model_name\", \"base_url\", \"tool_model_enabled\"}:\n            if await self.is_valid_ollama_url(self.base_url):\n                tool_model_enabled = build_config[\"tool_model_enabled\"].get(\"value\", False) or self.tool_model_enabled\n                build_config[\"model_name\"][\"options\"] = await self.get_models(self.base_url, tool_model_enabled)\n            elif await self.is_valid_ollama_url(build_config[\"base_url\"].get(\"value\", \"\")):\n                tool_model_enabled = build_config[\"tool_model_enabled\"].get(\"value\", False) or self.tool_model_enabled\n                build_config[\"model_name\"][\"options\"] = await self.get_models(\n                    build_config[\"base_url\"].get(\"value\", \"\"), tool_model_enabled\n                )\n            else:\n                build_config[\"model_name\"][\"options\"] = []\n        if field_name == \"keep_alive_flag\":\n            if field_value == \"Keep\":\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            elif field_value == \"Immediately\":\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            else:\n                build_config[\"keep_alive\"][\"advanced\"] = False\n\n        return build_config\n\n    async def get_models(self, base_url_value: str, tool_model_enabled: bool | None = None) -> list[str]:\n        \"\"\"Fetches a list of models from the Ollama API that do not have the \"embedding\" capability.\n\n        Args:\n            base_url_value (str): The base URL of the Ollama API.\n            tool_model_enabled (bool | None, optional): If True, filters the models further to include\n                only those that support tool calling. Defaults to None.\n\n        Returns:\n            list[str]: A list of model names that do not have the \"embedding\" capability. If\n                `tool_model_enabled` is True, only models supporting tool calling are included.\n\n        Raises:\n            ValueError: If there is an issue with the API request or response, or if the model\n                names cannot be retrieved.\n        \"\"\"\n        try:\n            # Normalize the base URL to avoid the repeated \"/\" at the end\n            base_url = base_url_value.rstrip(\"/\") + \"/\"\n\n            # Ollama REST API to return models\n            tags_url = urljoin(base_url, \"api/tags\")\n\n            # Ollama REST API to return model capabilities\n            show_url = urljoin(base_url, \"api/show\")\n\n            async with httpx.AsyncClient() as client:\n                # Fetch available models\n                tags_response = await client.get(tags_url)\n                tags_response.raise_for_status()\n                models = tags_response.json()\n                if asyncio.iscoroutine(models):\n                    models = await models\n                logger.debug(f\"Available models: {models}\")\n\n                # Filter models that are NOT embedding models\n                model_ids = []\n                for model in models[self.JSON_MODELS_KEY]:\n                    model_name = model[self.JSON_NAME_KEY]\n                    logger.debug(f\"Checking model: {model_name}\")\n\n                    payload = {\"model\": model_name}\n                    show_response = await client.post(show_url, json=payload)\n                    show_response.raise_for_status()\n                    json_data = show_response.json()\n                    if asyncio.iscoroutine(json_data):\n                        json_data = await json_data\n                    capabilities = json_data.get(self.JSON_CAPABILITIES_KEY, [])\n                    logger.debug(f\"Model: {model_name}, Capabilities: {capabilities}\")\n\n                    if self.DESIRED_CAPABILITY in capabilities:\n                        model_ids.append(model_name)\n\n        except (httpx.RequestError, ValueError) as e:\n            msg = \"Could not get model names from Ollama.\"\n            raise ValueError(msg) from e\n\n        return (\n            model_ids if not tool_model_enabled else [model for model in model_ids if self.supports_tool_calling(model)]\n        )\n\n    def supports_tool_calling(self, model: str) -> bool:\n        \"\"\"Check if model name is in the base of any models example llama3.3 can have 1b and 2b.\"\"\"\n        return any(model.startswith(f\"{tool_model}\") for tool_model in OLLAMA_TOOL_MODELS_BASE)\n"
                            },
                            "format": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Format",
                                "dynamic": false,
                                "info": "Specify the format of the output (e.g., json).",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "format",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "input_value": {
                                "_input_type": "MessageInput",
                                "advanced": false,
                                "display_name": "Input",
                                "dynamic": false,
                                "info": "",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "metadata": {
                                "_input_type": "DictInput",
                                "advanced": true,
                                "display_name": "Metadata",
                                "dynamic": false,
                                "info": "Metadata to add to the run trace.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "metadata",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "type": "dict",
                                "value": {}
                            },
                            "mirostat": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Mirostat",
                                "dynamic": false,
                                "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                                "name": "mirostat",
                                "options": [
                                    "Disabled",
                                    "Mirostat",
                                    "Mirostat 2.0"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Disabled"
                            },
                            "mirostat_eta": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Mirostat Eta",
                                "dynamic": false,
                                "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "mirostat_eta",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "mirostat_tau": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Mirostat Tau",
                                "dynamic": false,
                                "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "mirostat_tau",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "model_name": {
                                "_input_type": "DropdownInput",
                                "advanced": false,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Model Name",
                                "dynamic": false,
                                "info": "Refer to https://ollama.com/library for more models.",
                                "name": "model_name",
                                "options": [
                                    "smollm2:latest",
                                    "smollm2:1.7b",
                                    "llama3.2:3b",
                                    "qwen3:latest",
                                    "PetrosStav/gemma3-tools:12b",
                                    "gemma3:latest"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "refresh_button": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "gemma3:latest"
                            },
                            "num_ctx": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Context Window Size",
                                "dynamic": false,
                                "info": "Size of the context window for generating tokens. (Default: 2048)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_ctx",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "num_gpu": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Number of GPUs",
                                "dynamic": false,
                                "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_gpu",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "num_thread": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Number of Threads",
                                "dynamic": false,
                                "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_thread",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "repeat_last_n": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Repeat Last N",
                                "dynamic": false,
                                "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "repeat_last_n",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "repeat_penalty": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Repeat Penalty",
                                "dynamic": false,
                                "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "repeat_penalty",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "stop_tokens": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Stop Tokens",
                                "dynamic": false,
                                "info": "Comma-separated list of tokens to signal the model to stop generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "stop_tokens",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "stream": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Stream",
                                "dynamic": false,
                                "info": "Stream the response from the model. Streaming works only in Chat.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "stream",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            },
                            "system": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "System",
                                "dynamic": false,
                                "info": "System to use for generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "system",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "system_message": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "System Message",
                                "dynamic": false,
                                "info": "System message to pass to the model.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "system_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "tags": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Tags",
                                "dynamic": false,
                                "info": "Comma-separated list of tags to add to the run trace.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "tags",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "temperature": {
                                "_input_type": "SliderInput",
                                "advanced": true,
                                "display_name": "Temperature",
                                "dynamic": false,
                                "info": "",
                                "max_label": "",
                                "max_label_icon": "",
                                "min_label": "",
                                "min_label_icon": "",
                                "name": "temperature",
                                "placeholder": "",
                                "range_spec": {
                                    "max": 1,
                                    "min": 0,
                                    "step": 0.01,
                                    "step_type": "float"
                                },
                                "required": false,
                                "show": true,
                                "slider_buttons": false,
                                "slider_buttons_options": [],
                                "slider_input": false,
                                "title_case": false,
                                "tool_mode": false,
                                "type": "slider",
                                "value": 0.1
                            },
                            "template": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Template",
                                "dynamic": false,
                                "info": "Template to use for generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "tfs_z": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "TFS Z",
                                "dynamic": false,
                                "info": "Tail free sampling value. (Default: 1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "tfs_z",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "timeout": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Timeout",
                                "dynamic": false,
                                "info": "Timeout for the request stream.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "timeout",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "tool_model_enabled": {
                                "_input_type": "BoolInput",
                                "advanced": false,
                                "display_name": "Tool Model Enabled",
                                "dynamic": false,
                                "info": "Whether to enable tool calling in the model.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "tool_model_enabled",
                                "placeholder": "",
                                "real_time_refresh": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            },
                            "top_k": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Top K",
                                "dynamic": false,
                                "info": "Limits token selection to top K. (Default: 40)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "top_k",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "top_p": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Top P",
                                "dynamic": false,
                                "info": "Works together with top-k. (Default: 0.9)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "top_p",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "verbose": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Verbose",
                                "dynamic": false,
                                "info": "Whether to print out response text.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "verbose",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "OllamaModel"
                },
                "dragging": false,
                "id": "OllamaModel-SNPcC",
                "measured": {
                    "height": 565,
                    "width": 320
                },
                "position": {
                    "x": 1138.5154080433522,
                    "y": 1047.1452494214614
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "ChatOutput-xXjdD",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "category": "outputs",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "input_value",
                            "should_store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "data_template",
                            "background_color",
                            "chat_icon",
                            "text_color",
                            "clean_data"
                        ],
                        "frozen": false,
                        "icon": "MessagesSquare",
                        "key": "ChatOutput",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": true,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "method": "message_response",
                                "name": "message",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 0.003169567463043492,
                        "template": {
                            "_type": "Component",
                            "background_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Background Color",
                                "dynamic": false,
                                "info": "The background color of the icon.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "background_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "chat_icon": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Icon",
                                "dynamic": false,
                                "info": "The icon of the message.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "chat_icon",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "clean_data": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Basic Clean Data",
                                "dynamic": false,
                                "info": "Whether to clean the data",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "clean_data",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
                            },
                            "data_template": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Data Template",
                                "dynamic": false,
                                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "data_template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "{text}"
                            },
                            "input_value": {
                                "_input_type": "HandleInput",
                                "advanced": false,
                                "display_name": "Text",
                                "dynamic": false,
                                "info": "Message to be passed as output.",
                                "input_types": [
                                    "Data",
                                    "DataFrame",
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "input_value",
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "sender": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Sender Type",
                                "dynamic": false,
                                "info": "Type of sender.",
                                "name": "sender",
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Machine"
                            },
                            "sender_name": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Sender Name",
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "sender_name",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "AI"
                            },
                            "session_id": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Session ID",
                                "dynamic": false,
                                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "session_id",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "should_store_message": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Store Messages",
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "should_store_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            },
                            "text_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Text Color",
                                "dynamic": false,
                                "info": "The text color of the name",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "text_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": false,
                    "type": "ChatOutput"
                },
                "dragging": false,
                "id": "ChatOutput-xXjdD",
                "measured": {
                    "height": 66,
                    "width": 192
                },
                "position": {
                    "x": 1533.0697493199455,
                    "y": 1507.7386475409724
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "LocalDB-RZPjv",
                    "node": {
                        "base_classes": [
                            "DataFrame"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Local Vector Store with search capabilities",
                        "display_name": "Local DB",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "mode",
                            "collection_name",
                            "persist_directory",
                            "existing_collections",
                            "embedding",
                            "allow_duplicates",
                            "search_type",
                            "ingest_data",
                            "search_query",
                            "number_of_results",
                            "limit"
                        ],
                        "frozen": false,
                        "icon": "database",
                        "legacy": false,
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "DataFrame",
                                "method": "as_dataframe",
                                "name": "dataframe",
                                "selected": "DataFrame",
                                "tool_mode": true,
                                "types": [
                                    "DataFrame"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "allow_duplicates": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Allow Duplicates",
                                "dynamic": false,
                                "info": "If false, will not add documents that are already in the Vector Store.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "allow_duplicates",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from copy import deepcopy\nfrom pathlib import Path\n\nfrom langchain_chroma import Chroma\nfrom loguru import logger\nfrom typing_extensions import override\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.base.vectorstores.utils import chroma_collection_to_data\nfrom langflow.inputs.inputs import MultilineInput\nfrom langflow.io import BoolInput, DropdownInput, HandleInput, IntInput, MessageTextInput, TabInput\nfrom langflow.schema import Data, DataFrame\nfrom langflow.template.field.base import Output\n\n\nclass LocalDBComponent(LCVectorStoreComponent):\n    \"\"\"Chroma Vector Store with search capabilities.\"\"\"\n\n    display_name: str = \"Local DB\"\n    description: str = \"Local Vector Store with search capabilities\"\n    name = \"LocalDB\"\n    icon = \"database\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Ingest\", \"Retrieve\"],\n            info=\"Select the operation mode\",\n            value=\"Ingest\",\n            real_time_refresh=True,\n            show=True,\n        ),\n        MessageTextInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"langflow\",\n        ),\n        MessageTextInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n            info=(\n                \"Custom base directory to save the vector store. \"\n                \"Collections will be stored under '{directory}/vector_stores/{collection_name}'. \"\n                \"If not specified, it will use your system's cache folder.\"\n            ),\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"existing_collections\",\n            display_name=\"Existing Collections\",\n            options=[],  # Will be populated dynamically\n            info=\"Select a previously created collection to search through its stored data.\",\n            show=False,\n            combobox=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            input_types=[\"Data\", \"DataFrame\"],\n            is_list=True,\n            info=\"Data to store. It will be embedded and indexed for semantic search.\",\n            show=True,\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n            tool_mode=True,\n            info=\"Enter text to search for similar content in the selected collection.\",\n            show=False,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def get_vector_store_directory(self, base_dir: str | Path) -> Path:\n        \"\"\"Get the full directory path for a collection.\"\"\"\n        # Ensure base_dir is a Path object\n        base_dir = Path(base_dir)\n        # Create the full path: base_dir/vector_stores/collection_name\n        full_path = base_dir / \"vector_stores\" / self.collection_name\n        # Create the directory if it doesn't exist\n        full_path.mkdir(parents=True, exist_ok=True)\n        return full_path\n\n    def get_default_persist_dir(self) -> str:\n        \"\"\"Get the default persist directory from cache.\"\"\"\n        from langflow.services.cache.utils import CACHE_DIR\n\n        return str(self.get_vector_store_directory(CACHE_DIR))\n\n    def list_existing_collections(self) -> list[str]:\n        \"\"\"List existing vector store collections from the persist directory.\"\"\"\n        from langflow.services.cache.utils import CACHE_DIR\n\n        # Get the base directory (either custom or cache)\n        base_dir = Path(self.persist_directory) if self.persist_directory else Path(CACHE_DIR)\n        # Get the vector_stores subdirectory\n        vector_stores_dir = base_dir / \"vector_stores\"\n        if not vector_stores_dir.exists():\n            return []\n\n        return [d.name for d in vector_stores_dir.iterdir() if d.is_dir()]\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Update the build configuration when the mode changes.\"\"\"\n        if field_name == \"mode\":\n            # Hide all dynamic fields by default\n            dynamic_fields = [\n                \"ingest_data\",\n                \"search_query\",\n                \"search_type\",\n                \"number_of_results\",\n                \"existing_collections\",\n                \"collection_name\",\n                \"embedding\",\n                \"allow_duplicates\",\n                \"limit\",\n            ]\n            for field in dynamic_fields:\n                if field in build_config:\n                    build_config[field][\"show\"] = False\n\n            # Show/hide fields based on selected mode\n            if field_value == \"Ingest\":\n                if \"ingest_data\" in build_config:\n                    build_config[\"ingest_data\"][\"show\"] = True\n                if \"collection_name\" in build_config:\n                    build_config[\"collection_name\"][\"show\"] = True\n                    build_config[\"collection_name\"][\"display_name\"] = \"Name Your Collection\"\n                if \"persist\" in build_config:\n                    build_config[\"persist\"][\"show\"] = True\n                if \"persist_directory\" in build_config:\n                    build_config[\"persist_directory\"][\"show\"] = True\n                if \"embedding\" in build_config:\n                    build_config[\"embedding\"][\"show\"] = True\n                if \"allow_duplicates\" in build_config:\n                    build_config[\"allow_duplicates\"][\"show\"] = True\n                if \"limit\" in build_config:\n                    build_config[\"limit\"][\"show\"] = True\n            elif field_value == \"Retrieve\":\n                if \"persist\" in build_config:\n                    build_config[\"persist\"][\"show\"] = False\n                build_config[\"search_query\"][\"show\"] = True\n                build_config[\"search_type\"][\"show\"] = True\n                build_config[\"number_of_results\"][\"show\"] = True\n                build_config[\"embedding\"][\"show\"] = True\n                build_config[\"collection_name\"][\"show\"] = False\n                # Show existing collections dropdown and update its options\n                if \"existing_collections\" in build_config:\n                    build_config[\"existing_collections\"][\"show\"] = True\n                    build_config[\"existing_collections\"][\"options\"] = self.list_existing_collections()\n                # Hide collection_name in Retrieve mode since we use existing_collections\n        elif field_name == \"existing_collections\":\n            # Update collection_name when an existing collection is selected\n            if \"collection_name\" in build_config:\n                build_config[\"collection_name\"][\"value\"] = field_value\n\n        return build_config\n\n    @override\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"Builds the Chroma object.\"\"\"\n        try:\n            from langchain_chroma import Chroma\n        except ImportError as e:\n            msg = \"Could not import Chroma integration package. Please install it with `pip install langchain-chroma`.\"\n            raise ImportError(msg) from e\n        # Chroma settings\n        # chroma_settings = None\n        if self.existing_collections:\n            self.collection_name = self.existing_collections\n\n        # Use user-provided directory or default cache directory\n        if self.persist_directory:\n            base_dir = self.resolve_path(self.persist_directory)\n            persist_directory = str(self.get_vector_store_directory(base_dir))\n            logger.debug(f\"Using custom persist directory: {persist_directory}\")\n        else:\n            persist_directory = self.get_default_persist_dir()\n            logger.debug(f\"Using default persist directory: {persist_directory}\")\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=None,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"Adds documents to the Vector Store.\"\"\"\n        ingest_data: list | Data | DataFrame = self.ingest_data\n        if not ingest_data:\n            self.status = \"\"\n            return\n\n        # Convert DataFrame to Data if needed using parent's method\n        ingest_data = self._prepare_ingest_data()\n\n        stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents and self.embedding is not None:\n            self.log(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            self.log(\"No documents to add to the Vector Store.\")\n"
                            },
                            "collection_name": {
                                "_input_type": "MessageTextInput",
                                "advanced": false,
                                "display_name": "Collection Name",
                                "dynamic": false,
                                "info": "",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "collection_name",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "langflow"
                            },
                            "embedding": {
                                "_input_type": "HandleInput",
                                "advanced": false,
                                "display_name": "Embedding",
                                "dynamic": false,
                                "info": "",
                                "input_types": [
                                    "Embeddings"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "embedding",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "existing_collections": {
                                "_input_type": "DropdownInput",
                                "advanced": false,
                                "combobox": true,
                                "dialog_inputs": {},
                                "display_name": "Existing Collections",
                                "dynamic": false,
                                "info": "Select a previously created collection to search through its stored data.",
                                "name": "existing_collections",
                                "options": [],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": false,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "ingest_data": {
                                "_input_type": "HandleInput",
                                "advanced": false,
                                "display_name": "Ingest Data",
                                "dynamic": false,
                                "info": "Data to store. It will be embedded and indexed for semantic search.",
                                "input_types": [
                                    "Data",
                                    "DataFrame"
                                ],
                                "list": true,
                                "list_add_label": "Add More",
                                "name": "ingest_data",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "limit": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Limit",
                                "dynamic": false,
                                "info": "Limit the number of records to compare when Allow Duplicates is False.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "limit",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "mode": {
                                "_input_type": "TabInput",
                                "advanced": false,
                                "display_name": "Mode",
                                "dynamic": false,
                                "info": "Select the operation mode",
                                "name": "mode",
                                "options": [
                                    "Ingest",
                                    "Retrieve"
                                ],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "tab",
                                "value": "Ingest"
                            },
                            "number_of_results": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Number of Results",
                                "dynamic": false,
                                "info": "Number of results to return.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "number_of_results",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": 10
                            },
                            "persist_directory": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Persist Directory",
                                "dynamic": false,
                                "info": "Custom base directory to save the vector store. Collections will be stored under '{directory}/vector_stores/{collection_name}'. If not specified, it will use your system's cache folder.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "persist_directory",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "search_query": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "Search Query",
                                "dynamic": false,
                                "info": "Enter text to search for similar content in the selected collection.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "search_query",
                                "placeholder": "",
                                "required": false,
                                "show": false,
                                "title_case": false,
                                "tool_mode": true,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "search_type": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Search Type",
                                "dynamic": false,
                                "info": "",
                                "name": "search_type",
                                "options": [
                                    "Similarity",
                                    "MMR"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Similarity"
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "LocalDB"
                },
                "dragging": false,
                "id": "LocalDB-RZPjv",
                "measured": {
                    "height": 397,
                    "width": 320
                },
                "position": {
                    "x": 378.67520772795166,
                    "y": 359.19144661762954
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "LocalDB-p8ogd",
                    "node": {
                        "base_classes": [
                            "DataFrame"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Local Vector Store with search capabilities",
                        "display_name": "Local DB",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "mode",
                            "collection_name",
                            "persist_directory",
                            "existing_collections",
                            "embedding",
                            "allow_duplicates",
                            "search_type",
                            "ingest_data",
                            "search_query",
                            "number_of_results",
                            "limit"
                        ],
                        "frozen": false,
                        "icon": "database",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "DataFrame",
                                "hidden": false,
                                "method": "as_dataframe",
                                "name": "dataframe",
                                "options": null,
                                "required_inputs": null,
                                "selected": "DataFrame",
                                "tool_mode": true,
                                "types": [
                                    "DataFrame"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "allow_duplicates": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Allow Duplicates",
                                "dynamic": false,
                                "info": "If false, will not add documents that are already in the Vector Store.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "allow_duplicates",
                                "placeholder": "",
                                "required": false,
                                "show": false,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from copy import deepcopy\nfrom pathlib import Path\n\nfrom langchain_chroma import Chroma\nfrom loguru import logger\nfrom typing_extensions import override\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.base.vectorstores.utils import chroma_collection_to_data\nfrom langflow.inputs.inputs import MultilineInput\nfrom langflow.io import BoolInput, DropdownInput, HandleInput, IntInput, MessageTextInput, TabInput\nfrom langflow.schema import Data, DataFrame\nfrom langflow.template.field.base import Output\n\n\nclass LocalDBComponent(LCVectorStoreComponent):\n    \"\"\"Chroma Vector Store with search capabilities.\"\"\"\n\n    display_name: str = \"Local DB\"\n    description: str = \"Local Vector Store with search capabilities\"\n    name = \"LocalDB\"\n    icon = \"database\"\n\n    inputs = [\n        TabInput(\n            name=\"mode\",\n            display_name=\"Mode\",\n            options=[\"Ingest\", \"Retrieve\"],\n            info=\"Select the operation mode\",\n            value=\"Ingest\",\n            real_time_refresh=True,\n            show=True,\n        ),\n        MessageTextInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"langflow\",\n        ),\n        MessageTextInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n            info=(\n                \"Custom base directory to save the vector store. \"\n                \"Collections will be stored under '{directory}/vector_stores/{collection_name}'. \"\n                \"If not specified, it will use your system's cache folder.\"\n            ),\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"existing_collections\",\n            display_name=\"Existing Collections\",\n            options=[],  # Will be populated dynamically\n            info=\"Select a previously created collection to search through its stored data.\",\n            show=False,\n            combobox=True,\n        ),\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"ingest_data\",\n            display_name=\"Ingest Data\",\n            input_types=[\"Data\", \"DataFrame\"],\n            is_list=True,\n            info=\"Data to store. It will be embedded and indexed for semantic search.\",\n            show=True,\n        ),\n        MultilineInput(\n            name=\"search_query\",\n            display_name=\"Search Query\",\n            tool_mode=True,\n            info=\"Enter text to search for similar content in the selected collection.\",\n            show=False,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def get_vector_store_directory(self, base_dir: str | Path) -> Path:\n        \"\"\"Get the full directory path for a collection.\"\"\"\n        # Ensure base_dir is a Path object\n        base_dir = Path(base_dir)\n        # Create the full path: base_dir/vector_stores/collection_name\n        full_path = base_dir / \"vector_stores\" / self.collection_name\n        # Create the directory if it doesn't exist\n        full_path.mkdir(parents=True, exist_ok=True)\n        return full_path\n\n    def get_default_persist_dir(self) -> str:\n        \"\"\"Get the default persist directory from cache.\"\"\"\n        from langflow.services.cache.utils import CACHE_DIR\n\n        return str(self.get_vector_store_directory(CACHE_DIR))\n\n    def list_existing_collections(self) -> list[str]:\n        \"\"\"List existing vector store collections from the persist directory.\"\"\"\n        from langflow.services.cache.utils import CACHE_DIR\n\n        # Get the base directory (either custom or cache)\n        base_dir = Path(self.persist_directory) if self.persist_directory else Path(CACHE_DIR)\n        # Get the vector_stores subdirectory\n        vector_stores_dir = base_dir / \"vector_stores\"\n        if not vector_stores_dir.exists():\n            return []\n\n        return [d.name for d in vector_stores_dir.iterdir() if d.is_dir()]\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Update the build configuration when the mode changes.\"\"\"\n        if field_name == \"mode\":\n            # Hide all dynamic fields by default\n            dynamic_fields = [\n                \"ingest_data\",\n                \"search_query\",\n                \"search_type\",\n                \"number_of_results\",\n                \"existing_collections\",\n                \"collection_name\",\n                \"embedding\",\n                \"allow_duplicates\",\n                \"limit\",\n            ]\n            for field in dynamic_fields:\n                if field in build_config:\n                    build_config[field][\"show\"] = False\n\n            # Show/hide fields based on selected mode\n            if field_value == \"Ingest\":\n                if \"ingest_data\" in build_config:\n                    build_config[\"ingest_data\"][\"show\"] = True\n                if \"collection_name\" in build_config:\n                    build_config[\"collection_name\"][\"show\"] = True\n                    build_config[\"collection_name\"][\"display_name\"] = \"Name Your Collection\"\n                if \"persist\" in build_config:\n                    build_config[\"persist\"][\"show\"] = True\n                if \"persist_directory\" in build_config:\n                    build_config[\"persist_directory\"][\"show\"] = True\n                if \"embedding\" in build_config:\n                    build_config[\"embedding\"][\"show\"] = True\n                if \"allow_duplicates\" in build_config:\n                    build_config[\"allow_duplicates\"][\"show\"] = True\n                if \"limit\" in build_config:\n                    build_config[\"limit\"][\"show\"] = True\n            elif field_value == \"Retrieve\":\n                if \"persist\" in build_config:\n                    build_config[\"persist\"][\"show\"] = False\n                build_config[\"search_query\"][\"show\"] = True\n                build_config[\"search_type\"][\"show\"] = True\n                build_config[\"number_of_results\"][\"show\"] = True\n                build_config[\"embedding\"][\"show\"] = True\n                build_config[\"collection_name\"][\"show\"] = False\n                # Show existing collections dropdown and update its options\n                if \"existing_collections\" in build_config:\n                    build_config[\"existing_collections\"][\"show\"] = True\n                    build_config[\"existing_collections\"][\"options\"] = self.list_existing_collections()\n                # Hide collection_name in Retrieve mode since we use existing_collections\n        elif field_name == \"existing_collections\":\n            # Update collection_name when an existing collection is selected\n            if \"collection_name\" in build_config:\n                build_config[\"collection_name\"][\"value\"] = field_value\n\n        return build_config\n\n    @override\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"Builds the Chroma object.\"\"\"\n        try:\n            from langchain_chroma import Chroma\n        except ImportError as e:\n            msg = \"Could not import Chroma integration package. Please install it with `pip install langchain-chroma`.\"\n            raise ImportError(msg) from e\n        # Chroma settings\n        # chroma_settings = None\n        if self.existing_collections:\n            self.collection_name = self.existing_collections\n\n        # Use user-provided directory or default cache directory\n        if self.persist_directory:\n            base_dir = self.resolve_path(self.persist_directory)\n            persist_directory = str(self.get_vector_store_directory(base_dir))\n            logger.debug(f\"Using custom persist directory: {persist_directory}\")\n        else:\n            persist_directory = self.get_default_persist_dir()\n            logger.debug(f\"Using default persist directory: {persist_directory}\")\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=None,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"Adds documents to the Vector Store.\"\"\"\n        ingest_data: list | Data | DataFrame = self.ingest_data\n        if not ingest_data:\n            self.status = \"\"\n            return\n\n        # Convert DataFrame to Data if needed using parent's method\n        ingest_data = self._prepare_ingest_data()\n\n        stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents and self.embedding is not None:\n            self.log(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            self.log(\"No documents to add to the Vector Store.\")\n"
                            },
                            "collection_name": {
                                "_input_type": "MessageTextInput",
                                "advanced": false,
                                "display_name": "Collection Name",
                                "dynamic": false,
                                "info": "",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "collection_name",
                                "placeholder": "",
                                "required": false,
                                "show": false,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "langflow"
                            },
                            "embedding": {
                                "_input_type": "HandleInput",
                                "advanced": false,
                                "display_name": "Embedding",
                                "dynamic": false,
                                "info": "",
                                "input_types": [
                                    "Embeddings"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "embedding",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "existing_collections": {
                                "_input_type": "DropdownInput",
                                "advanced": false,
                                "combobox": true,
                                "dialog_inputs": {},
                                "display_name": "Existing Collections",
                                "dynamic": false,
                                "info": "Select a previously created collection to search through its stored data.",
                                "name": "existing_collections",
                                "options": [
                                    "langflow"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "langflow"
                            },
                            "ingest_data": {
                                "_input_type": "HandleInput",
                                "advanced": false,
                                "display_name": "Ingest Data",
                                "dynamic": false,
                                "info": "Data to store. It will be embedded and indexed for semantic search.",
                                "input_types": [
                                    "Data",
                                    "DataFrame"
                                ],
                                "list": true,
                                "list_add_label": "Add More",
                                "name": "ingest_data",
                                "placeholder": "",
                                "required": false,
                                "show": false,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "limit": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Limit",
                                "dynamic": false,
                                "info": "Limit the number of records to compare when Allow Duplicates is False.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "limit",
                                "placeholder": "",
                                "required": false,
                                "show": false,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "mode": {
                                "_input_type": "TabInput",
                                "advanced": false,
                                "display_name": "Mode",
                                "dynamic": false,
                                "info": "Select the operation mode",
                                "name": "mode",
                                "options": [
                                    "Ingest",
                                    "Retrieve"
                                ],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "tab",
                                "value": "Retrieve"
                            },
                            "number_of_results": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Number of Results",
                                "dynamic": false,
                                "info": "Number of results to return.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "number_of_results",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": 10
                            },
                            "persist_directory": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Persist Directory",
                                "dynamic": false,
                                "info": "Custom base directory to save the vector store. Collections will be stored under '{directory}/vector_stores/{collection_name}'. If not specified, it will use your system's cache folder.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "persist_directory",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "search_query": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "Search Query",
                                "dynamic": false,
                                "info": "Enter text to search for similar content in the selected collection.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "search_query",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": true,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "search_type": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Search Type",
                                "dynamic": false,
                                "info": "",
                                "name": "search_type",
                                "options": [
                                    "Similarity",
                                    "MMR"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Similarity"
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "LocalDB"
                },
                "dragging": false,
                "id": "LocalDB-p8ogd",
                "measured": {
                    "height": 435,
                    "width": 320
                },
                "position": {
                    "x": -93.08341896215755,
                    "y": 1810.0548543935959
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "note-9qdYm",
                    "node": {
                        "description": "# Langflow RAG (Retrieval Augmented Generation) Flow - Example\n\nThis flow demonstrates how to build a **RAG pipeline** using **Langflow** with local LLM (**Ollama**) and a local vector store (**Local DB**).\n\n---\n\n## \ud83d\ude80 Flow Structure\n\n**File Upload \u2192 Split Text \u2192 Ollama Embeddings \u2192 Local DB (Ingest)**  \n**Chat Input \u2192 Ollama Embeddings \u2192 Local DB (Retrieve) \u2192 Parser \u2192 Prompt Template \u2192 Ollama \u2192 Chat Output**\n\n---\n\n## \ud83e\udded How the Flow Works\n\n1. **File Upload (PDF)**  \n   - Loads a document (`Ryanair B737NG ...pdf`).\n\n2. **Split Text**  \n   - Splits the document into chunks:  \n     - Chunk Size: `1000`  \n     - Chunk Overlap: `200`\n\n3. **Ollama Embeddings** (Ingest Phase)  \n   - Generates embeddings for document chunks using:  \n     - Model: `snowflake-arctic-embed:2:latest`\n\n4. **Local DB (Vector Store - Ingest)**  \n   - Saves embeddings into a local vector store (`Collection Name: langflow`).\n\n5. **Chat Input**  \n   - User submits a query (question).\n\n6. **Ollama Embeddings** (Query Phase)  \n   - Generates embeddings for the user query.\n\n7. **Local DB (Retrieve Phase)**  \n   - Retrieves the most relevant chunks from the vector store using semantic search.\n\n8. **Parser**  \n   - Formats the retrieved chunks into text for context injection.\n\n9. **Prompt Template**  \n   - Constructs a dynamic prompt that includes:  \n     - The user\u2019s **question**  \n     - The retrieved **context** (parsed chunks)\n\n10. **Ollama (LLM)**  \n    - Generates a final response based on the prompt.\n    - Example LLM: `gemma3:latest`\n\n11. **Chat Output**  \n    - Displays the model\u2019s answer to the user.\n\n---\n\n## \ud83d\udee0\ufe0f Purpose\n\n- To implement a basic **RAG pipeline**.\n- Allows the model to **use external knowledge** from documents.\n- The LLM can answer questions grounded in document content.\n\n---\n\n## \ud83d\udda5\ufe0f Components Used\n\n- **File** (Upload)\n- **Split Text**\n- **Ollama Embeddings** (Ingest + Query)\n- **Local DB** (Vector Store - Ingest + Retrieve)\n- **Chat Input / Chat Output**\n- **Parser**\n- **Prompt Template**\n- **Ollama Node** (LLM)\n\n---\n\n## \ud83d\udcdd Notes\n\n- Uses local embeddings: `snowflake-arctic-embed:2:latest`\n- Uses local LLM: `gemma3:latest`\n- No external memory (Redis) in this flow \u2014 context comes from retrieved document chunks.\n- The flow can be extended with:\n  - More complex prompt templates.\n  - More advanced embedding models.\n  - Full-text search fallback.\n\n---\n\nThis flow is a good **starting point for RAG-based chatbots** using Langflow + Ollama! \ud83d\ude80\n",
                        "display_name": "",
                        "documentation": "",
                        "template": {}
                    },
                    "type": "note"
                },
                "dragging": false,
                "height": 2617,
                "id": "note-9qdYm",
                "measured": {
                    "height": 2617,
                    "width": 576
                },
                "position": {
                    "x": -1183.195993583981,
                    "y": -272.3254534819612
                },
                "resizing": false,
                "selected": false,
                "type": "noteNode",
                "width": 576
            }
        ],
        "viewport": {
            "x": 1454.7715914913779,
            "y": 198.8189643582051,
            "zoom": 0.42529614061902943
        }
    },
    "description": "Empowering Enterprises with Intelligent Interactions.",
    "endpoint_name": null,
    "id": "6d57c3ab-a3f9-4346-b976-d0045a3fdf5b",
    "is_component": false,
    "last_tested_version": "1.4.3",
    "name": "Case - 3: RAG",
    "tags": []
}
