{
    "data": {
        "edges": [
            {
                "animated": false,
                "data": {
                    "sourceHandle": {
                        "dataType": "TextInput",
                        "id": "TextInput-WEBxq",
                        "name": "text",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "OllamaModel-vkqgR",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "reactflow__edge-TextInput-WEBxq{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-WEBxq\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OllamaModel-vkqgR{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OllamaModel-vkqgR\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                "selected": false,
                "source": "TextInput-WEBxq",
                "sourceHandle": "{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-WEBxq\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "OllamaModel-vkqgR",
                "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OllamaModel-vkqgR\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
            },
            {
                "animated": false,
                "data": {
                    "sourceHandle": {
                        "dataType": "OllamaModel",
                        "id": "OllamaModel-vkqgR",
                        "name": "text_output",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "TextOutput-vrzkX",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "reactflow__edge-OllamaModel-vkqgR{\u0153dataType\u0153:\u0153OllamaModel\u0153,\u0153id\u0153:\u0153OllamaModel-vkqgR\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-TextOutput-vrzkX{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153TextOutput-vrzkX\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                "selected": false,
                "source": "OllamaModel-vkqgR",
                "sourceHandle": "{\u0153dataType\u0153:\u0153OllamaModel\u0153,\u0153id\u0153:\u0153OllamaModel-vkqgR\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "TextOutput-vrzkX",
                "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153TextOutput-vrzkX\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
            },
            {
                "animated": false,
                "data": {
                    "sourceHandle": {
                        "dataType": "TextInput",
                        "id": "TextInput-cPorZ",
                        "name": "text",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "OllamaModel-uUVCh",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "reactflow__edge-TextInput-cPorZ{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-cPorZ\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OllamaModel-uUVCh{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OllamaModel-uUVCh\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                "selected": false,
                "source": "TextInput-cPorZ",
                "sourceHandle": "{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-cPorZ\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "OllamaModel-uUVCh",
                "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OllamaModel-uUVCh\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
            },
            {
                "animated": false,
                "data": {
                    "sourceHandle": {
                        "dataType": "OllamaModel",
                        "id": "OllamaModel-uUVCh",
                        "name": "text_output",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "TextOutput-XTuUe",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "reactflow__edge-OllamaModel-uUVCh{\u0153dataType\u0153:\u0153OllamaModel\u0153,\u0153id\u0153:\u0153OllamaModel-uUVCh\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-TextOutput-XTuUe{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153TextOutput-XTuUe\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                "selected": false,
                "source": "OllamaModel-uUVCh",
                "sourceHandle": "{\u0153dataType\u0153:\u0153OllamaModel\u0153,\u0153id\u0153:\u0153OllamaModel-uUVCh\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "TextOutput-XTuUe",
                "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153TextOutput-XTuUe\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
            },
            {
                "animated": false,
                "data": {
                    "sourceHandle": {
                        "dataType": "ChatInput",
                        "id": "ChatInput-CrOsS",
                        "name": "message",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "OllamaModel-17FDw",
                        "inputTypes": [
                            "Message"
                        ],
                        "type": "str"
                    }
                },
                "id": "reactflow__edge-ChatInput-CrOsS{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-CrOsS\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OllamaModel-17FDw{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OllamaModel-17FDw\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                "selected": false,
                "source": "ChatInput-CrOsS",
                "sourceHandle": "{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-CrOsS\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "OllamaModel-17FDw",
                "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OllamaModel-17FDw\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
            },
            {
                "animated": false,
                "data": {
                    "sourceHandle": {
                        "dataType": "OllamaModel",
                        "id": "OllamaModel-17FDw",
                        "name": "text_output",
                        "output_types": [
                            "Message"
                        ]
                    },
                    "targetHandle": {
                        "fieldName": "input_value",
                        "id": "ChatOutput-lpF8f",
                        "inputTypes": [
                            "Data",
                            "DataFrame",
                            "Message"
                        ],
                        "type": "other"
                    }
                },
                "id": "reactflow__edge-OllamaModel-17FDw{\u0153dataType\u0153:\u0153OllamaModel\u0153,\u0153id\u0153:\u0153OllamaModel-17FDw\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-lpF8f{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-lpF8f\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}",
                "selected": false,
                "source": "OllamaModel-17FDw",
                "sourceHandle": "{\u0153dataType\u0153:\u0153OllamaModel\u0153,\u0153id\u0153:\u0153OllamaModel-17FDw\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                "target": "ChatOutput-lpF8f",
                "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-lpF8f\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153,\u0153DataFrame\u0153,\u0153Message\u0153],\u0153type\u0153:\u0153other\u0153}"
            }
        ],
        "nodes": [
            {
                "data": {
                    "id": "TextInput-WEBxq",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Get text inputs from the Playground.",
                        "display_name": "Text Input",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "input_value"
                        ],
                        "frozen": false,
                        "icon": "type",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "hidden": false,
                                "method": "text_response",
                                "name": "text",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
                            },
                            "input_value": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "Text",
                                "dynamic": false,
                                "info": "Text to be passed as input.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Hi"
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "TextInput"
                },
                "id": "TextInput-WEBxq",
                "measured": {
                    "height": 229,
                    "width": 320
                },
                "position": {
                    "x": 29.76230311552854,
                    "y": 486.42684178597887
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "OllamaModel-vkqgR",
                    "node": {
                        "base_classes": [
                            "LanguageModel",
                            "Message"
                        ],
                        "beta": false,
                        "category": "models",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Generate text using Ollama Local LLMs.",
                        "display_name": "Ollama",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "base_url",
                            "model_name",
                            "temperature",
                            "format",
                            "metadata",
                            "mirostat",
                            "mirostat_eta",
                            "mirostat_tau",
                            "num_ctx",
                            "num_gpu",
                            "num_thread",
                            "repeat_last_n",
                            "repeat_penalty",
                            "tfs_z",
                            "timeout",
                            "top_k",
                            "top_p",
                            "verbose",
                            "tags",
                            "stop_tokens",
                            "system",
                            "tool_model_enabled",
                            "template",
                            "input_value",
                            "system_message",
                            "stream"
                        ],
                        "frozen": false,
                        "icon": "Ollama",
                        "key": "OllamaModel",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "hidden": false,
                                "method": "text_response",
                                "name": "text_output",
                                "options": null,
                                "required_inputs": [],
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            },
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Language Model",
                                "method": "build_model",
                                "name": "model_output",
                                "options": null,
                                "required_inputs": [],
                                "selected": "LanguageModel",
                                "tool_mode": true,
                                "types": [
                                    "LanguageModel"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 1.1514907767935298e-16,
                        "template": {
                            "_type": "Component",
                            "base_url": {
                                "_input_type": "MessageTextInput",
                                "advanced": false,
                                "display_name": "Base URL",
                                "dynamic": false,
                                "info": "Endpoint of the Ollama API.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "base_url",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "http://localhost:11434"
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "import asyncio\nfrom typing import Any\nfrom urllib.parse import urljoin\n\nimport httpx\nfrom langchain_ollama import ChatOllama\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.ollama_constants import OLLAMA_TOOL_MODELS_BASE, URL_LIST\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SliderInput\nfrom langflow.logging import logger\n\nHTTP_STATUS_OK = 200\n\n\nclass ChatOllamaComponent(LCModelComponent):\n    display_name = \"Ollama\"\n    description = \"Generate text using Ollama Local LLMs.\"\n    icon = \"Ollama\"\n    name = \"OllamaModel\"\n\n    # Define constants for JSON keys\n    JSON_MODELS_KEY = \"models\"\n    JSON_NAME_KEY = \"name\"\n    JSON_CAPABILITIES_KEY = \"capabilities\"\n    DESIRED_CAPABILITY = \"completion\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"Endpoint of the Ollama API.\",\n            value=\"\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            options=[],\n            info=\"Refer to https://ollama.com/library for more models.\",\n            refresh_button=True,\n            real_time_refresh=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"format\", display_name=\"Format\", info=\"Specify the format of the output (e.g., json).\", advanced=True\n        ),\n        DictInput(name=\"metadata\", display_name=\"Metadata\", info=\"Metadata to add to the run trace.\", advanced=True),\n        DropdownInput(\n            name=\"mirostat\",\n            display_name=\"Mirostat\",\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\n            value=\"Disabled\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        FloatInput(\n            name=\"mirostat_eta\",\n            display_name=\"Mirostat Eta\",\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_tau\",\n            display_name=\"Mirostat Tau\",\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_ctx\",\n            display_name=\"Context Window Size\",\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_gpu\",\n            display_name=\"Number of GPUs\",\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_thread\",\n            display_name=\"Number of Threads\",\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"repeat_last_n\",\n            display_name=\"Repeat Last N\",\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"repeat_penalty\",\n            display_name=\"Repeat Penalty\",\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\n            advanced=True,\n        ),\n        FloatInput(name=\"tfs_z\", display_name=\"TFS Z\", info=\"Tail free sampling value. (Default: 1)\", advanced=True),\n        IntInput(name=\"timeout\", display_name=\"Timeout\", info=\"Timeout for the request stream.\", advanced=True),\n        IntInput(\n            name=\"top_k\", display_name=\"Top K\", info=\"Limits token selection to top K. (Default: 40)\", advanced=True\n        ),\n        FloatInput(name=\"top_p\", display_name=\"Top P\", info=\"Works together with top-k. (Default: 0.9)\", advanced=True),\n        BoolInput(name=\"verbose\", display_name=\"Verbose\", info=\"Whether to print out response text.\", advanced=True),\n        MessageTextInput(\n            name=\"tags\",\n            display_name=\"Tags\",\n            info=\"Comma-separated list of tags to add to the run trace.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"stop_tokens\",\n            display_name=\"Stop Tokens\",\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"system\", display_name=\"System\", info=\"System to use for generating text.\", advanced=True\n        ),\n        BoolInput(\n            name=\"tool_model_enabled\",\n            display_name=\"Tool Model Enabled\",\n            info=\"Whether to enable tool calling in the model.\",\n            value=False,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"template\", display_name=\"Template\", info=\"Template to use for generating text.\", advanced=True\n        ),\n        *LCModelComponent._base_inputs,\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(self.mirostat, 0)\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n        else:\n            mirostat_eta = self.mirostat_eta\n            mirostat_tau = self.mirostat_tau\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": self.base_url,\n            \"model\": self.model_name,\n            \"mirostat\": mirostat_value,\n            \"format\": self.format,\n            \"metadata\": self.metadata,\n            \"tags\": self.tags.split(\",\") if self.tags else None,\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": self.num_ctx or None,\n            \"num_gpu\": self.num_gpu or None,\n            \"num_thread\": self.num_thread or None,\n            \"repeat_last_n\": self.repeat_last_n or None,\n            \"repeat_penalty\": self.repeat_penalty or None,\n            \"temperature\": self.temperature or None,\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\n            \"system\": self.system,\n            \"tfs_z\": self.tfs_z or None,\n            \"timeout\": self.timeout or None,\n            \"top_k\": self.top_k or None,\n            \"top_p\": self.top_p or None,\n            \"verbose\": self.verbose,\n            \"template\": self.template,\n        }\n\n        # Remove parameters with None values\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)\n        except Exception as e:\n            msg = (\n                \"Unable to connect to the Ollama API. \",\n                \"Please verify the base URL, ensure the relevant Ollama model is pulled, and try again.\",\n            )\n            raise ValueError(msg) from e\n\n        return output\n\n    async def is_valid_ollama_url(self, url: str) -> bool:\n        try:\n            async with httpx.AsyncClient() as client:\n                return (await client.get(urljoin(url, \"api/tags\"))).status_code == HTTP_STATUS_OK\n        except httpx.RequestError:\n            return False\n\n    async def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name == \"mirostat\":\n            if field_value == \"Disabled\":\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\n                build_config[\"mirostat_eta\"][\"value\"] = None\n                build_config[\"mirostat_tau\"][\"value\"] = None\n\n            else:\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\n\n                if field_value == \"Mirostat 2.0\":\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\n                else:\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\n\n        if field_name in {\"base_url\", \"model_name\"}:\n            if build_config[\"base_url\"].get(\"load_from_db\", False):\n                base_url_value = await self.get_variables(build_config[\"base_url\"].get(\"value\", \"\"), \"base_url\")\n            else:\n                base_url_value = build_config[\"base_url\"].get(\"value\", \"\")\n\n            if not await self.is_valid_ollama_url(base_url_value):\n                # Check if any URL in the list is valid\n                valid_url = \"\"\n                check_urls = URL_LIST\n                if self.base_url:\n                    check_urls = [self.base_url, *URL_LIST]\n                for url in check_urls:\n                    if await self.is_valid_ollama_url(url):\n                        valid_url = url\n                        break\n                if valid_url != \"\":\n                    build_config[\"base_url\"][\"value\"] = valid_url\n                else:\n                    msg = \"No valid Ollama URL found.\"\n                    raise ValueError(msg)\n        if field_name in {\"model_name\", \"base_url\", \"tool_model_enabled\"}:\n            if await self.is_valid_ollama_url(self.base_url):\n                tool_model_enabled = build_config[\"tool_model_enabled\"].get(\"value\", False) or self.tool_model_enabled\n                build_config[\"model_name\"][\"options\"] = await self.get_models(self.base_url, tool_model_enabled)\n            elif await self.is_valid_ollama_url(build_config[\"base_url\"].get(\"value\", \"\")):\n                tool_model_enabled = build_config[\"tool_model_enabled\"].get(\"value\", False) or self.tool_model_enabled\n                build_config[\"model_name\"][\"options\"] = await self.get_models(\n                    build_config[\"base_url\"].get(\"value\", \"\"), tool_model_enabled\n                )\n            else:\n                build_config[\"model_name\"][\"options\"] = []\n        if field_name == \"keep_alive_flag\":\n            if field_value == \"Keep\":\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            elif field_value == \"Immediately\":\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            else:\n                build_config[\"keep_alive\"][\"advanced\"] = False\n\n        return build_config\n\n    async def get_models(self, base_url_value: str, tool_model_enabled: bool | None = None) -> list[str]:\n        \"\"\"Fetches a list of models from the Ollama API that do not have the \"embedding\" capability.\n\n        Args:\n            base_url_value (str): The base URL of the Ollama API.\n            tool_model_enabled (bool | None, optional): If True, filters the models further to include\n                only those that support tool calling. Defaults to None.\n\n        Returns:\n            list[str]: A list of model names that do not have the \"embedding\" capability. If\n                `tool_model_enabled` is True, only models supporting tool calling are included.\n\n        Raises:\n            ValueError: If there is an issue with the API request or response, or if the model\n                names cannot be retrieved.\n        \"\"\"\n        try:\n            # Normalize the base URL to avoid the repeated \"/\" at the end\n            base_url = base_url_value.rstrip(\"/\") + \"/\"\n\n            # Ollama REST API to return models\n            tags_url = urljoin(base_url, \"api/tags\")\n\n            # Ollama REST API to return model capabilities\n            show_url = urljoin(base_url, \"api/show\")\n\n            async with httpx.AsyncClient() as client:\n                # Fetch available models\n                tags_response = await client.get(tags_url)\n                tags_response.raise_for_status()\n                models = tags_response.json()\n                if asyncio.iscoroutine(models):\n                    models = await models\n                logger.debug(f\"Available models: {models}\")\n\n                # Filter models that are NOT embedding models\n                model_ids = []\n                for model in models[self.JSON_MODELS_KEY]:\n                    model_name = model[self.JSON_NAME_KEY]\n                    logger.debug(f\"Checking model: {model_name}\")\n\n                    payload = {\"model\": model_name}\n                    show_response = await client.post(show_url, json=payload)\n                    show_response.raise_for_status()\n                    json_data = show_response.json()\n                    if asyncio.iscoroutine(json_data):\n                        json_data = await json_data\n                    capabilities = json_data.get(self.JSON_CAPABILITIES_KEY, [])\n                    logger.debug(f\"Model: {model_name}, Capabilities: {capabilities}\")\n\n                    if self.DESIRED_CAPABILITY in capabilities:\n                        model_ids.append(model_name)\n\n        except (httpx.RequestError, ValueError) as e:\n            msg = \"Could not get model names from Ollama.\"\n            raise ValueError(msg) from e\n\n        return (\n            model_ids if not tool_model_enabled else [model for model in model_ids if self.supports_tool_calling(model)]\n        )\n\n    def supports_tool_calling(self, model: str) -> bool:\n        \"\"\"Check if model name is in the base of any models example llama3.3 can have 1b and 2b.\"\"\"\n        return any(model.startswith(f\"{tool_model}\") for tool_model in OLLAMA_TOOL_MODELS_BASE)\n"
                            },
                            "format": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Format",
                                "dynamic": false,
                                "info": "Specify the format of the output (e.g., json).",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "format",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "input_value": {
                                "_input_type": "MessageInput",
                                "advanced": false,
                                "display_name": "Input",
                                "dynamic": false,
                                "info": "",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "metadata": {
                                "_input_type": "DictInput",
                                "advanced": true,
                                "display_name": "Metadata",
                                "dynamic": false,
                                "info": "Metadata to add to the run trace.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "metadata",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "type": "dict",
                                "value": {}
                            },
                            "mirostat": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Mirostat",
                                "dynamic": false,
                                "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                                "name": "mirostat",
                                "options": [
                                    "Disabled",
                                    "Mirostat",
                                    "Mirostat 2.0"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Disabled"
                            },
                            "mirostat_eta": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Mirostat Eta",
                                "dynamic": false,
                                "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "mirostat_eta",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "mirostat_tau": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Mirostat Tau",
                                "dynamic": false,
                                "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "mirostat_tau",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "model_name": {
                                "_input_type": "DropdownInput",
                                "advanced": false,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Model Name",
                                "dynamic": false,
                                "info": "Refer to https://ollama.com/library for more models.",
                                "name": "model_name",
                                "options": [
                                    "PetrosStav/gemma3-tools:4b",
                                    "PetrosStav/gemma3-tools:12b",
                                    "qwen3:30b",
                                    "qwen3:8b",
                                    "qwen3:4b",
                                    "qwen3:1.7b",
                                    "qwen3:0.6b",
                                    "gemma3:latest",
                                    "gemma3:12b",
                                    "gemma3:4b",
                                    "qwen2.5:latest",
                                    "gemma2:27b",
                                    "gemma2:9b",
                                    "qwen2.5:32b",
                                    "deepseek-r1:14b",
                                    "deepseek-r1:1.5b",
                                    "deepseek-r1:7b",
                                    "codegemma:latest",
                                    "gemma2:2b",
                                    "llama3.1:latest",
                                    "deepseek-coder:6.7b",
                                    "deepseek-coder:latest",
                                    "llama3.3:latest",
                                    "qwq:latest",
                                    "qwen2.5-coder:14b",
                                    "starcoder2:instruct",
                                    "llama3.2:latest",
                                    "llama3.2:1b",
                                    "mistral-nemo:latest",
                                    "gemma2:latest"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "refresh_button": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "num_ctx": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Context Window Size",
                                "dynamic": false,
                                "info": "Size of the context window for generating tokens. (Default: 2048)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_ctx",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "num_gpu": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Number of GPUs",
                                "dynamic": false,
                                "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_gpu",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "num_thread": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Number of Threads",
                                "dynamic": false,
                                "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_thread",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "repeat_last_n": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Repeat Last N",
                                "dynamic": false,
                                "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "repeat_last_n",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "repeat_penalty": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Repeat Penalty",
                                "dynamic": false,
                                "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "repeat_penalty",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "stop_tokens": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Stop Tokens",
                                "dynamic": false,
                                "info": "Comma-separated list of tokens to signal the model to stop generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "stop_tokens",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "stream": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Stream",
                                "dynamic": false,
                                "info": "Stream the response from the model. Streaming works only in Chat.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "stream",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            },
                            "system": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "System",
                                "dynamic": false,
                                "info": "System to use for generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "system",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "system_message": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "System Message",
                                "dynamic": false,
                                "info": "System message to pass to the model.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "system_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "tags": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Tags",
                                "dynamic": false,
                                "info": "Comma-separated list of tags to add to the run trace.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "tags",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "temperature": {
                                "_input_type": "SliderInput",
                                "advanced": true,
                                "display_name": "Temperature",
                                "dynamic": false,
                                "info": "",
                                "max_label": "",
                                "max_label_icon": "",
                                "min_label": "",
                                "min_label_icon": "",
                                "name": "temperature",
                                "placeholder": "",
                                "range_spec": {
                                    "max": 1,
                                    "min": 0,
                                    "step": 0.01,
                                    "step_type": "float"
                                },
                                "required": false,
                                "show": true,
                                "slider_buttons": false,
                                "slider_buttons_options": [],
                                "slider_input": false,
                                "title_case": false,
                                "tool_mode": false,
                                "type": "slider",
                                "value": 0.1
                            },
                            "template": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Template",
                                "dynamic": false,
                                "info": "Template to use for generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "tfs_z": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "TFS Z",
                                "dynamic": false,
                                "info": "Tail free sampling value. (Default: 1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "tfs_z",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "timeout": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Timeout",
                                "dynamic": false,
                                "info": "Timeout for the request stream.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "timeout",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "tool_model_enabled": {
                                "_input_type": "BoolInput",
                                "advanced": false,
                                "display_name": "Tool Model Enabled",
                                "dynamic": false,
                                "info": "Whether to enable tool calling in the model.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "tool_model_enabled",
                                "placeholder": "",
                                "real_time_refresh": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            },
                            "top_k": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Top K",
                                "dynamic": false,
                                "info": "Limits token selection to top K. (Default: 40)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "top_k",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "top_p": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Top P",
                                "dynamic": false,
                                "info": "Works together with top-k. (Default: 0.9)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "top_p",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "verbose": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Verbose",
                                "dynamic": false,
                                "info": "Whether to print out response text.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "verbose",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "OllamaModel"
                },
                "id": "OllamaModel-vkqgR",
                "measured": {
                    "height": 565,
                    "width": 320
                },
                "position": {
                    "x": 526.9709402489793,
                    "y": 491.80386436527203
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "TextOutput-vrzkX",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "category": "outputs",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Display a text output in the Playground.",
                        "display_name": "Text Output",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "input_value"
                        ],
                        "frozen": false,
                        "icon": "type",
                        "key": "TextOutput",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "method": "text_response",
                                "name": "text",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 0.003169567463043492,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n"
                            },
                            "input_value": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "Text",
                                "dynamic": false,
                                "info": "Text to be passed as output.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "TextOutput"
                },
                "id": "TextOutput-vrzkX",
                "measured": {
                    "height": 229,
                    "width": 320
                },
                "position": {
                    "x": 1035.7469602521803,
                    "y": 495.3288714322687
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "note-TcmkT",
                    "node": {
                        "description": "# Langflow Basic LLM Flow - Starter Example\n\nThis project demonstrates a simple **Langflow** setup using a local **LLM (Large Language Model)** with **Ollama**.\n\nThe example flow consists of 3 main nodes, which work together to take user input, process it through the LLM, and display the output.",
                        "display_name": "",
                        "documentation": "",
                        "template": {}
                    },
                    "type": "note"
                },
                "dragging": false,
                "id": "note-TcmkT",
                "measured": {
                    "height": 354,
                    "width": 325
                },
                "position": {
                    "x": 40.40055793766925,
                    "y": 92.45360337835774
                },
                "selected": true,
                "type": "noteNode"
            },
            {
                "data": {
                    "id": "note-aSIx3",
                    "node": {
                        "description": "## \ud83d\udce5 1. Text Input\n\n- This node collects text input from the user.\n- The input text is passed to the LLM model.\n- In **Playground** mode, you can leave this field empty and use **Chat Input** instead (see section below).",
                        "display_name": "",
                        "documentation": "",
                        "template": {}
                    },
                    "type": "note"
                },
                "id": "note-aSIx3",
                "measured": {
                    "height": 324,
                    "width": 325
                },
                "position": {
                    "x": 20,
                    "y": 736.2183491931851
                },
                "selected": false,
                "type": "noteNode"
            },
            {
                "data": {
                    "id": "note-wxulf",
                    "node": {
                        "description": "## \ud83e\udd16 2. Ollama Node\n\n- This is the core LLM processing node.\n- It sends the input text to a local LLM running with **Ollama**.\n- Key parameters:\n    - **Base URL**: \n`http://localhost:11434` \n     - **Base URL for Docker**: \n`http://host.docker.internal:11434`\n    - **Model Name**: `smallmix:21.7b`\n    - **System Message**: (optional) add system instructions for the model.\n\n- The Ollama Node returns the model\u2019s generated response.",
                        "display_name": "",
                        "documentation": "",
                        "template": {}
                    },
                    "type": "note"
                },
                "dragging": false,
                "id": "note-wxulf",
                "measured": {
                    "height": 441,
                    "width": 325
                },
                "position": {
                    "x": 528.5524845009425,
                    "y": 1076.7553288764373
                },
                "selected": false,
                "type": "noteNode"
            },
            {
                "data": {
                    "id": "note-CIgZ1",
                    "node": {
                        "description": "## \ud83d\udce4 3. Text Output\n\n- This node displays the generated response from the LLM.\n- It shows the output on the screen or in the Langflow interface.\n- In **Playground** mode, you can leave this field empty and use **Chat Output** instead.",
                        "display_name": "",
                        "documentation": "",
                        "template": {}
                    },
                    "type": "note"
                },
                "dragging": false,
                "id": "note-CIgZ1",
                "measured": {
                    "height": 324,
                    "width": 325
                },
                "position": {
                    "x": 1048.3422277396671,
                    "y": 814.3829200612206
                },
                "selected": false,
                "type": "noteNode"
            },
            {
                "data": {
                    "id": "OllamaModel-uUVCh",
                    "node": {
                        "base_classes": [
                            "LanguageModel",
                            "Message"
                        ],
                        "beta": false,
                        "category": "models",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Generate text using Ollama Local LLMs.",
                        "display_name": "Ollama",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "base_url",
                            "model_name",
                            "temperature",
                            "format",
                            "metadata",
                            "mirostat",
                            "mirostat_eta",
                            "mirostat_tau",
                            "num_ctx",
                            "num_gpu",
                            "num_thread",
                            "repeat_last_n",
                            "repeat_penalty",
                            "tfs_z",
                            "timeout",
                            "top_k",
                            "top_p",
                            "verbose",
                            "tags",
                            "stop_tokens",
                            "system",
                            "tool_model_enabled",
                            "template",
                            "input_value",
                            "system_message",
                            "stream"
                        ],
                        "frozen": false,
                        "icon": "Ollama",
                        "key": "OllamaModel",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "hidden": false,
                                "method": "text_response",
                                "name": "text_output",
                                "options": null,
                                "required_inputs": [],
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            },
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Language Model",
                                "method": "build_model",
                                "name": "model_output",
                                "options": null,
                                "required_inputs": [],
                                "selected": "LanguageModel",
                                "tool_mode": true,
                                "types": [
                                    "LanguageModel"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 1.1514907767935298e-16,
                        "template": {
                            "_type": "Component",
                            "base_url": {
                                "_input_type": "MessageTextInput",
                                "advanced": false,
                                "display_name": "Base URL",
                                "dynamic": false,
                                "info": "Endpoint of the Ollama API.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "base_url",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "http://localhost:11434"
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "import asyncio\nfrom typing import Any\nfrom urllib.parse import urljoin\n\nimport httpx\nfrom langchain_ollama import ChatOllama\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.ollama_constants import OLLAMA_TOOL_MODELS_BASE, URL_LIST\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SliderInput\nfrom langflow.logging import logger\n\nHTTP_STATUS_OK = 200\n\n\nclass ChatOllamaComponent(LCModelComponent):\n    display_name = \"Ollama\"\n    description = \"Generate text using Ollama Local LLMs.\"\n    icon = \"Ollama\"\n    name = \"OllamaModel\"\n\n    # Define constants for JSON keys\n    JSON_MODELS_KEY = \"models\"\n    JSON_NAME_KEY = \"name\"\n    JSON_CAPABILITIES_KEY = \"capabilities\"\n    DESIRED_CAPABILITY = \"completion\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"Endpoint of the Ollama API.\",\n            value=\"\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            options=[],\n            info=\"Refer to https://ollama.com/library for more models.\",\n            refresh_button=True,\n            real_time_refresh=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"format\", display_name=\"Format\", info=\"Specify the format of the output (e.g., json).\", advanced=True\n        ),\n        DictInput(name=\"metadata\", display_name=\"Metadata\", info=\"Metadata to add to the run trace.\", advanced=True),\n        DropdownInput(\n            name=\"mirostat\",\n            display_name=\"Mirostat\",\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\n            value=\"Disabled\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        FloatInput(\n            name=\"mirostat_eta\",\n            display_name=\"Mirostat Eta\",\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_tau\",\n            display_name=\"Mirostat Tau\",\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_ctx\",\n            display_name=\"Context Window Size\",\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_gpu\",\n            display_name=\"Number of GPUs\",\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_thread\",\n            display_name=\"Number of Threads\",\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"repeat_last_n\",\n            display_name=\"Repeat Last N\",\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"repeat_penalty\",\n            display_name=\"Repeat Penalty\",\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\n            advanced=True,\n        ),\n        FloatInput(name=\"tfs_z\", display_name=\"TFS Z\", info=\"Tail free sampling value. (Default: 1)\", advanced=True),\n        IntInput(name=\"timeout\", display_name=\"Timeout\", info=\"Timeout for the request stream.\", advanced=True),\n        IntInput(\n            name=\"top_k\", display_name=\"Top K\", info=\"Limits token selection to top K. (Default: 40)\", advanced=True\n        ),\n        FloatInput(name=\"top_p\", display_name=\"Top P\", info=\"Works together with top-k. (Default: 0.9)\", advanced=True),\n        BoolInput(name=\"verbose\", display_name=\"Verbose\", info=\"Whether to print out response text.\", advanced=True),\n        MessageTextInput(\n            name=\"tags\",\n            display_name=\"Tags\",\n            info=\"Comma-separated list of tags to add to the run trace.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"stop_tokens\",\n            display_name=\"Stop Tokens\",\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"system\", display_name=\"System\", info=\"System to use for generating text.\", advanced=True\n        ),\n        BoolInput(\n            name=\"tool_model_enabled\",\n            display_name=\"Tool Model Enabled\",\n            info=\"Whether to enable tool calling in the model.\",\n            value=False,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"template\", display_name=\"Template\", info=\"Template to use for generating text.\", advanced=True\n        ),\n        *LCModelComponent._base_inputs,\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(self.mirostat, 0)\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n        else:\n            mirostat_eta = self.mirostat_eta\n            mirostat_tau = self.mirostat_tau\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": self.base_url,\n            \"model\": self.model_name,\n            \"mirostat\": mirostat_value,\n            \"format\": self.format,\n            \"metadata\": self.metadata,\n            \"tags\": self.tags.split(\",\") if self.tags else None,\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": self.num_ctx or None,\n            \"num_gpu\": self.num_gpu or None,\n            \"num_thread\": self.num_thread or None,\n            \"repeat_last_n\": self.repeat_last_n or None,\n            \"repeat_penalty\": self.repeat_penalty or None,\n            \"temperature\": self.temperature or None,\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\n            \"system\": self.system,\n            \"tfs_z\": self.tfs_z or None,\n            \"timeout\": self.timeout or None,\n            \"top_k\": self.top_k or None,\n            \"top_p\": self.top_p or None,\n            \"verbose\": self.verbose,\n            \"template\": self.template,\n        }\n\n        # Remove parameters with None values\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)\n        except Exception as e:\n            msg = (\n                \"Unable to connect to the Ollama API. \",\n                \"Please verify the base URL, ensure the relevant Ollama model is pulled, and try again.\",\n            )\n            raise ValueError(msg) from e\n\n        return output\n\n    async def is_valid_ollama_url(self, url: str) -> bool:\n        try:\n            async with httpx.AsyncClient() as client:\n                return (await client.get(urljoin(url, \"api/tags\"))).status_code == HTTP_STATUS_OK\n        except httpx.RequestError:\n            return False\n\n    async def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name == \"mirostat\":\n            if field_value == \"Disabled\":\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\n                build_config[\"mirostat_eta\"][\"value\"] = None\n                build_config[\"mirostat_tau\"][\"value\"] = None\n\n            else:\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\n\n                if field_value == \"Mirostat 2.0\":\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\n                else:\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\n\n        if field_name in {\"base_url\", \"model_name\"}:\n            if build_config[\"base_url\"].get(\"load_from_db\", False):\n                base_url_value = await self.get_variables(build_config[\"base_url\"].get(\"value\", \"\"), \"base_url\")\n            else:\n                base_url_value = build_config[\"base_url\"].get(\"value\", \"\")\n\n            if not await self.is_valid_ollama_url(base_url_value):\n                # Check if any URL in the list is valid\n                valid_url = \"\"\n                check_urls = URL_LIST\n                if self.base_url:\n                    check_urls = [self.base_url, *URL_LIST]\n                for url in check_urls:\n                    if await self.is_valid_ollama_url(url):\n                        valid_url = url\n                        break\n                if valid_url != \"\":\n                    build_config[\"base_url\"][\"value\"] = valid_url\n                else:\n                    msg = \"No valid Ollama URL found.\"\n                    raise ValueError(msg)\n        if field_name in {\"model_name\", \"base_url\", \"tool_model_enabled\"}:\n            if await self.is_valid_ollama_url(self.base_url):\n                tool_model_enabled = build_config[\"tool_model_enabled\"].get(\"value\", False) or self.tool_model_enabled\n                build_config[\"model_name\"][\"options\"] = await self.get_models(self.base_url, tool_model_enabled)\n            elif await self.is_valid_ollama_url(build_config[\"base_url\"].get(\"value\", \"\")):\n                tool_model_enabled = build_config[\"tool_model_enabled\"].get(\"value\", False) or self.tool_model_enabled\n                build_config[\"model_name\"][\"options\"] = await self.get_models(\n                    build_config[\"base_url\"].get(\"value\", \"\"), tool_model_enabled\n                )\n            else:\n                build_config[\"model_name\"][\"options\"] = []\n        if field_name == \"keep_alive_flag\":\n            if field_value == \"Keep\":\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            elif field_value == \"Immediately\":\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            else:\n                build_config[\"keep_alive\"][\"advanced\"] = False\n\n        return build_config\n\n    async def get_models(self, base_url_value: str, tool_model_enabled: bool | None = None) -> list[str]:\n        \"\"\"Fetches a list of models from the Ollama API that do not have the \"embedding\" capability.\n\n        Args:\n            base_url_value (str): The base URL of the Ollama API.\n            tool_model_enabled (bool | None, optional): If True, filters the models further to include\n                only those that support tool calling. Defaults to None.\n\n        Returns:\n            list[str]: A list of model names that do not have the \"embedding\" capability. If\n                `tool_model_enabled` is True, only models supporting tool calling are included.\n\n        Raises:\n            ValueError: If there is an issue with the API request or response, or if the model\n                names cannot be retrieved.\n        \"\"\"\n        try:\n            # Normalize the base URL to avoid the repeated \"/\" at the end\n            base_url = base_url_value.rstrip(\"/\") + \"/\"\n\n            # Ollama REST API to return models\n            tags_url = urljoin(base_url, \"api/tags\")\n\n            # Ollama REST API to return model capabilities\n            show_url = urljoin(base_url, \"api/show\")\n\n            async with httpx.AsyncClient() as client:\n                # Fetch available models\n                tags_response = await client.get(tags_url)\n                tags_response.raise_for_status()\n                models = tags_response.json()\n                if asyncio.iscoroutine(models):\n                    models = await models\n                logger.debug(f\"Available models: {models}\")\n\n                # Filter models that are NOT embedding models\n                model_ids = []\n                for model in models[self.JSON_MODELS_KEY]:\n                    model_name = model[self.JSON_NAME_KEY]\n                    logger.debug(f\"Checking model: {model_name}\")\n\n                    payload = {\"model\": model_name}\n                    show_response = await client.post(show_url, json=payload)\n                    show_response.raise_for_status()\n                    json_data = show_response.json()\n                    if asyncio.iscoroutine(json_data):\n                        json_data = await json_data\n                    capabilities = json_data.get(self.JSON_CAPABILITIES_KEY, [])\n                    logger.debug(f\"Model: {model_name}, Capabilities: {capabilities}\")\n\n                    if self.DESIRED_CAPABILITY in capabilities:\n                        model_ids.append(model_name)\n\n        except (httpx.RequestError, ValueError) as e:\n            msg = \"Could not get model names from Ollama.\"\n            raise ValueError(msg) from e\n\n        return (\n            model_ids if not tool_model_enabled else [model for model in model_ids if self.supports_tool_calling(model)]\n        )\n\n    def supports_tool_calling(self, model: str) -> bool:\n        \"\"\"Check if model name is in the base of any models example llama3.3 can have 1b and 2b.\"\"\"\n        return any(model.startswith(f\"{tool_model}\") for tool_model in OLLAMA_TOOL_MODELS_BASE)\n"
                            },
                            "format": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Format",
                                "dynamic": false,
                                "info": "Specify the format of the output (e.g., json).",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "format",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "input_value": {
                                "_input_type": "MessageInput",
                                "advanced": false,
                                "display_name": "Input",
                                "dynamic": false,
                                "info": "",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "metadata": {
                                "_input_type": "DictInput",
                                "advanced": true,
                                "display_name": "Metadata",
                                "dynamic": false,
                                "info": "Metadata to add to the run trace.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "metadata",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "type": "dict",
                                "value": {}
                            },
                            "mirostat": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Mirostat",
                                "dynamic": false,
                                "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                                "name": "mirostat",
                                "options": [
                                    "Disabled",
                                    "Mirostat",
                                    "Mirostat 2.0"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Disabled"
                            },
                            "mirostat_eta": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Mirostat Eta",
                                "dynamic": false,
                                "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "mirostat_eta",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "mirostat_tau": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Mirostat Tau",
                                "dynamic": false,
                                "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "mirostat_tau",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "model_name": {
                                "_input_type": "DropdownInput",
                                "advanced": false,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Model Name",
                                "dynamic": false,
                                "info": "Refer to https://ollama.com/library for more models.",
                                "name": "model_name",
                                "options": [
                                    "PetrosStav/gemma3-tools:4b",
                                    "PetrosStav/gemma3-tools:12b",
                                    "qwen3:30b",
                                    "qwen3:8b",
                                    "qwen3:4b",
                                    "qwen3:1.7b",
                                    "qwen3:0.6b",
                                    "gemma3:latest",
                                    "gemma3:12b",
                                    "gemma3:4b",
                                    "qwen2.5:latest",
                                    "gemma2:27b",
                                    "gemma2:9b",
                                    "qwen2.5:32b",
                                    "deepseek-r1:14b",
                                    "deepseek-r1:1.5b",
                                    "deepseek-r1:7b",
                                    "codegemma:latest",
                                    "gemma2:2b",
                                    "llama3.1:latest",
                                    "deepseek-coder:6.7b",
                                    "deepseek-coder:latest",
                                    "llama3.3:latest",
                                    "qwq:latest",
                                    "qwen2.5-coder:14b",
                                    "starcoder2:instruct",
                                    "llama3.2:latest",
                                    "llama3.2:1b",
                                    "mistral-nemo:latest",
                                    "gemma2:latest"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "refresh_button": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "num_ctx": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Context Window Size",
                                "dynamic": false,
                                "info": "Size of the context window for generating tokens. (Default: 2048)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_ctx",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "num_gpu": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Number of GPUs",
                                "dynamic": false,
                                "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_gpu",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "num_thread": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Number of Threads",
                                "dynamic": false,
                                "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_thread",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "repeat_last_n": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Repeat Last N",
                                "dynamic": false,
                                "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "repeat_last_n",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "repeat_penalty": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Repeat Penalty",
                                "dynamic": false,
                                "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "repeat_penalty",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "stop_tokens": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Stop Tokens",
                                "dynamic": false,
                                "info": "Comma-separated list of tokens to signal the model to stop generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "stop_tokens",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "stream": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Stream",
                                "dynamic": false,
                                "info": "Stream the response from the model. Streaming works only in Chat.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "stream",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            },
                            "system": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "System",
                                "dynamic": false,
                                "info": "System to use for generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "system",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "system_message": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "System Message",
                                "dynamic": false,
                                "info": "System message to pass to the model.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "system_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "You are an Comedian. Every time give answer the comedian style."
                            },
                            "tags": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Tags",
                                "dynamic": false,
                                "info": "Comma-separated list of tags to add to the run trace.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "tags",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "temperature": {
                                "_input_type": "SliderInput",
                                "advanced": true,
                                "display_name": "Temperature",
                                "dynamic": false,
                                "info": "",
                                "max_label": "",
                                "max_label_icon": "",
                                "min_label": "",
                                "min_label_icon": "",
                                "name": "temperature",
                                "placeholder": "",
                                "range_spec": {
                                    "max": 1,
                                    "min": 0,
                                    "step": 0.01,
                                    "step_type": "float"
                                },
                                "required": false,
                                "show": true,
                                "slider_buttons": false,
                                "slider_buttons_options": [],
                                "slider_input": false,
                                "title_case": false,
                                "tool_mode": false,
                                "type": "slider",
                                "value": 0.1
                            },
                            "template": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Template",
                                "dynamic": false,
                                "info": "Template to use for generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "tfs_z": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "TFS Z",
                                "dynamic": false,
                                "info": "Tail free sampling value. (Default: 1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "tfs_z",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "timeout": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Timeout",
                                "dynamic": false,
                                "info": "Timeout for the request stream.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "timeout",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "tool_model_enabled": {
                                "_input_type": "BoolInput",
                                "advanced": false,
                                "display_name": "Tool Model Enabled",
                                "dynamic": false,
                                "info": "Whether to enable tool calling in the model.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "tool_model_enabled",
                                "placeholder": "",
                                "real_time_refresh": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            },
                            "top_k": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Top K",
                                "dynamic": false,
                                "info": "Limits token selection to top K. (Default: 40)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "top_k",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "top_p": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Top P",
                                "dynamic": false,
                                "info": "Works together with top-k. (Default: 0.9)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "top_p",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "verbose": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Verbose",
                                "dynamic": false,
                                "info": "Whether to print out response text.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "verbose",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "OllamaModel"
                },
                "id": "OllamaModel-uUVCh",
                "measured": {
                    "height": 565,
                    "width": 320
                },
                "position": {
                    "x": 2038.4048483586091,
                    "y": 490.69470686915247
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "TextInput-cPorZ",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Get text inputs from the Playground.",
                        "display_name": "Text Input",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "input_value"
                        ],
                        "frozen": false,
                        "icon": "type",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "hidden": false,
                                "method": "text_response",
                                "name": "text",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
                            },
                            "input_value": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "Text",
                                "dynamic": false,
                                "info": "Text to be passed as input.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Hi"
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "TextInput"
                },
                "id": "TextInput-cPorZ",
                "measured": {
                    "height": 229,
                    "width": 320
                },
                "position": {
                    "x": 1658.8189647387,
                    "y": 492.4385344208396
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "TextOutput-XTuUe",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "category": "outputs",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Display a text output in the Playground.",
                        "display_name": "Text Output",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "input_value"
                        ],
                        "frozen": false,
                        "icon": "type",
                        "key": "TextOutput",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "method": "text_response",
                                "name": "text",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 0.003169567463043492,
                        "template": {
                            "_type": "Component",
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Display a text output in the Playground.\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n"
                            },
                            "input_value": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "Text",
                                "dynamic": false,
                                "info": "Text to be passed as output.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "TextOutput"
                },
                "id": "TextOutput-XTuUe",
                "measured": {
                    "height": 229,
                    "width": 320
                },
                "position": {
                    "x": 2425.041541350157,
                    "y": 484.9265483756293
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "note-TaIy5",
                    "node": {
                        "description": "## \ud83d\udee0\ufe0f System Prompt\n\n- The **System Prompt** defines how the LLM should behave.\n- It sets the tone, style, and role of the assistant.\n- Used to guide the model\u2019s responses (e.g. formal tone, expert role, helpful style).\n- Helps ensure consistent and controlled outputs across interactions.\n",
                        "display_name": "",
                        "documentation": "",
                        "template": {}
                    },
                    "type": "note"
                },
                "dragging": false,
                "id": "note-TaIy5",
                "measured": {
                    "height": 324,
                    "width": 325
                },
                "position": {
                    "x": 2046.1463285464606,
                    "y": 1072.4115585512773
                },
                "selected": false,
                "type": "noteNode"
            },
            {
                "data": {
                    "id": "OllamaModel-17FDw",
                    "node": {
                        "base_classes": [
                            "LanguageModel",
                            "Message"
                        ],
                        "beta": false,
                        "category": "models",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Generate text using Ollama Local LLMs.",
                        "display_name": "Ollama",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "base_url",
                            "model_name",
                            "temperature",
                            "format",
                            "metadata",
                            "mirostat",
                            "mirostat_eta",
                            "mirostat_tau",
                            "num_ctx",
                            "num_gpu",
                            "num_thread",
                            "repeat_last_n",
                            "repeat_penalty",
                            "tfs_z",
                            "timeout",
                            "top_k",
                            "top_p",
                            "verbose",
                            "tags",
                            "stop_tokens",
                            "system",
                            "tool_model_enabled",
                            "template",
                            "input_value",
                            "system_message",
                            "stream"
                        ],
                        "frozen": false,
                        "icon": "Ollama",
                        "key": "OllamaModel",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": false,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "hidden": false,
                                "method": "text_response",
                                "name": "text_output",
                                "options": null,
                                "required_inputs": [],
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            },
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Language Model",
                                "method": "build_model",
                                "name": "model_output",
                                "options": null,
                                "required_inputs": [],
                                "selected": "LanguageModel",
                                "tool_mode": true,
                                "types": [
                                    "LanguageModel"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 1.1514907767935298e-16,
                        "template": {
                            "_type": "Component",
                            "base_url": {
                                "_input_type": "MessageTextInput",
                                "advanced": false,
                                "display_name": "Base URL",
                                "dynamic": false,
                                "info": "Endpoint of the Ollama API.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "base_url",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "http://localhost:11434"
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "import asyncio\nfrom typing import Any\nfrom urllib.parse import urljoin\n\nimport httpx\nfrom langchain_ollama import ChatOllama\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.ollama_constants import OLLAMA_TOOL_MODELS_BASE, URL_LIST\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SliderInput\nfrom langflow.logging import logger\n\nHTTP_STATUS_OK = 200\n\n\nclass ChatOllamaComponent(LCModelComponent):\n    display_name = \"Ollama\"\n    description = \"Generate text using Ollama Local LLMs.\"\n    icon = \"Ollama\"\n    name = \"OllamaModel\"\n\n    # Define constants for JSON keys\n    JSON_MODELS_KEY = \"models\"\n    JSON_NAME_KEY = \"name\"\n    JSON_CAPABILITIES_KEY = \"capabilities\"\n    DESIRED_CAPABILITY = \"completion\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Base URL\",\n            info=\"Endpoint of the Ollama API.\",\n            value=\"\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            options=[],\n            info=\"Refer to https://ollama.com/library for more models.\",\n            refresh_button=True,\n            real_time_refresh=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"format\", display_name=\"Format\", info=\"Specify the format of the output (e.g., json).\", advanced=True\n        ),\n        DictInput(name=\"metadata\", display_name=\"Metadata\", info=\"Metadata to add to the run trace.\", advanced=True),\n        DropdownInput(\n            name=\"mirostat\",\n            display_name=\"Mirostat\",\n            options=[\"Disabled\", \"Mirostat\", \"Mirostat 2.0\"],\n            info=\"Enable/disable Mirostat sampling for controlling perplexity.\",\n            value=\"Disabled\",\n            advanced=True,\n            real_time_refresh=True,\n        ),\n        FloatInput(\n            name=\"mirostat_eta\",\n            display_name=\"Mirostat Eta\",\n            info=\"Learning rate for Mirostat algorithm. (Default: 0.1)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"mirostat_tau\",\n            display_name=\"Mirostat Tau\",\n            info=\"Controls the balance between coherence and diversity of the output. (Default: 5.0)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_ctx\",\n            display_name=\"Context Window Size\",\n            info=\"Size of the context window for generating tokens. (Default: 2048)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_gpu\",\n            display_name=\"Number of GPUs\",\n            info=\"Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"num_thread\",\n            display_name=\"Number of Threads\",\n            info=\"Number of threads to use during computation. (Default: detected for optimal performance)\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"repeat_last_n\",\n            display_name=\"Repeat Last N\",\n            info=\"How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"repeat_penalty\",\n            display_name=\"Repeat Penalty\",\n            info=\"Penalty for repetitions in generated text. (Default: 1.1)\",\n            advanced=True,\n        ),\n        FloatInput(name=\"tfs_z\", display_name=\"TFS Z\", info=\"Tail free sampling value. (Default: 1)\", advanced=True),\n        IntInput(name=\"timeout\", display_name=\"Timeout\", info=\"Timeout for the request stream.\", advanced=True),\n        IntInput(\n            name=\"top_k\", display_name=\"Top K\", info=\"Limits token selection to top K. (Default: 40)\", advanced=True\n        ),\n        FloatInput(name=\"top_p\", display_name=\"Top P\", info=\"Works together with top-k. (Default: 0.9)\", advanced=True),\n        BoolInput(name=\"verbose\", display_name=\"Verbose\", info=\"Whether to print out response text.\", advanced=True),\n        MessageTextInput(\n            name=\"tags\",\n            display_name=\"Tags\",\n            info=\"Comma-separated list of tags to add to the run trace.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"stop_tokens\",\n            display_name=\"Stop Tokens\",\n            info=\"Comma-separated list of tokens to signal the model to stop generating text.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"system\", display_name=\"System\", info=\"System to use for generating text.\", advanced=True\n        ),\n        BoolInput(\n            name=\"tool_model_enabled\",\n            display_name=\"Tool Model Enabled\",\n            info=\"Whether to enable tool calling in the model.\",\n            value=False,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"template\", display_name=\"Template\", info=\"Template to use for generating text.\", advanced=True\n        ),\n        *LCModelComponent._base_inputs,\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # Mapping mirostat settings to their corresponding values\n        mirostat_options = {\"Mirostat\": 1, \"Mirostat 2.0\": 2}\n\n        # Default to 0 for 'Disabled'\n        mirostat_value = mirostat_options.get(self.mirostat, 0)\n\n        # Set mirostat_eta and mirostat_tau to None if mirostat is disabled\n        if mirostat_value == 0:\n            mirostat_eta = None\n            mirostat_tau = None\n        else:\n            mirostat_eta = self.mirostat_eta\n            mirostat_tau = self.mirostat_tau\n\n        # Mapping system settings to their corresponding values\n        llm_params = {\n            \"base_url\": self.base_url,\n            \"model\": self.model_name,\n            \"mirostat\": mirostat_value,\n            \"format\": self.format,\n            \"metadata\": self.metadata,\n            \"tags\": self.tags.split(\",\") if self.tags else None,\n            \"mirostat_eta\": mirostat_eta,\n            \"mirostat_tau\": mirostat_tau,\n            \"num_ctx\": self.num_ctx or None,\n            \"num_gpu\": self.num_gpu or None,\n            \"num_thread\": self.num_thread or None,\n            \"repeat_last_n\": self.repeat_last_n or None,\n            \"repeat_penalty\": self.repeat_penalty or None,\n            \"temperature\": self.temperature or None,\n            \"stop\": self.stop_tokens.split(\",\") if self.stop_tokens else None,\n            \"system\": self.system,\n            \"tfs_z\": self.tfs_z or None,\n            \"timeout\": self.timeout or None,\n            \"top_k\": self.top_k or None,\n            \"top_p\": self.top_p or None,\n            \"verbose\": self.verbose,\n            \"template\": self.template,\n        }\n\n        # Remove parameters with None values\n        llm_params = {k: v for k, v in llm_params.items() if v is not None}\n\n        try:\n            output = ChatOllama(**llm_params)\n        except Exception as e:\n            msg = (\n                \"Unable to connect to the Ollama API. \",\n                \"Please verify the base URL, ensure the relevant Ollama model is pulled, and try again.\",\n            )\n            raise ValueError(msg) from e\n\n        return output\n\n    async def is_valid_ollama_url(self, url: str) -> bool:\n        try:\n            async with httpx.AsyncClient() as client:\n                return (await client.get(urljoin(url, \"api/tags\"))).status_code == HTTP_STATUS_OK\n        except httpx.RequestError:\n            return False\n\n    async def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name == \"mirostat\":\n            if field_value == \"Disabled\":\n                build_config[\"mirostat_eta\"][\"advanced\"] = True\n                build_config[\"mirostat_tau\"][\"advanced\"] = True\n                build_config[\"mirostat_eta\"][\"value\"] = None\n                build_config[\"mirostat_tau\"][\"value\"] = None\n\n            else:\n                build_config[\"mirostat_eta\"][\"advanced\"] = False\n                build_config[\"mirostat_tau\"][\"advanced\"] = False\n\n                if field_value == \"Mirostat 2.0\":\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.2\n                    build_config[\"mirostat_tau\"][\"value\"] = 10\n                else:\n                    build_config[\"mirostat_eta\"][\"value\"] = 0.1\n                    build_config[\"mirostat_tau\"][\"value\"] = 5\n\n        if field_name in {\"base_url\", \"model_name\"}:\n            if build_config[\"base_url\"].get(\"load_from_db\", False):\n                base_url_value = await self.get_variables(build_config[\"base_url\"].get(\"value\", \"\"), \"base_url\")\n            else:\n                base_url_value = build_config[\"base_url\"].get(\"value\", \"\")\n\n            if not await self.is_valid_ollama_url(base_url_value):\n                # Check if any URL in the list is valid\n                valid_url = \"\"\n                check_urls = URL_LIST\n                if self.base_url:\n                    check_urls = [self.base_url, *URL_LIST]\n                for url in check_urls:\n                    if await self.is_valid_ollama_url(url):\n                        valid_url = url\n                        break\n                if valid_url != \"\":\n                    build_config[\"base_url\"][\"value\"] = valid_url\n                else:\n                    msg = \"No valid Ollama URL found.\"\n                    raise ValueError(msg)\n        if field_name in {\"model_name\", \"base_url\", \"tool_model_enabled\"}:\n            if await self.is_valid_ollama_url(self.base_url):\n                tool_model_enabled = build_config[\"tool_model_enabled\"].get(\"value\", False) or self.tool_model_enabled\n                build_config[\"model_name\"][\"options\"] = await self.get_models(self.base_url, tool_model_enabled)\n            elif await self.is_valid_ollama_url(build_config[\"base_url\"].get(\"value\", \"\")):\n                tool_model_enabled = build_config[\"tool_model_enabled\"].get(\"value\", False) or self.tool_model_enabled\n                build_config[\"model_name\"][\"options\"] = await self.get_models(\n                    build_config[\"base_url\"].get(\"value\", \"\"), tool_model_enabled\n                )\n            else:\n                build_config[\"model_name\"][\"options\"] = []\n        if field_name == \"keep_alive_flag\":\n            if field_value == \"Keep\":\n                build_config[\"keep_alive\"][\"value\"] = \"-1\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            elif field_value == \"Immediately\":\n                build_config[\"keep_alive\"][\"value\"] = \"0\"\n                build_config[\"keep_alive\"][\"advanced\"] = True\n            else:\n                build_config[\"keep_alive\"][\"advanced\"] = False\n\n        return build_config\n\n    async def get_models(self, base_url_value: str, tool_model_enabled: bool | None = None) -> list[str]:\n        \"\"\"Fetches a list of models from the Ollama API that do not have the \"embedding\" capability.\n\n        Args:\n            base_url_value (str): The base URL of the Ollama API.\n            tool_model_enabled (bool | None, optional): If True, filters the models further to include\n                only those that support tool calling. Defaults to None.\n\n        Returns:\n            list[str]: A list of model names that do not have the \"embedding\" capability. If\n                `tool_model_enabled` is True, only models supporting tool calling are included.\n\n        Raises:\n            ValueError: If there is an issue with the API request or response, or if the model\n                names cannot be retrieved.\n        \"\"\"\n        try:\n            # Normalize the base URL to avoid the repeated \"/\" at the end\n            base_url = base_url_value.rstrip(\"/\") + \"/\"\n\n            # Ollama REST API to return models\n            tags_url = urljoin(base_url, \"api/tags\")\n\n            # Ollama REST API to return model capabilities\n            show_url = urljoin(base_url, \"api/show\")\n\n            async with httpx.AsyncClient() as client:\n                # Fetch available models\n                tags_response = await client.get(tags_url)\n                tags_response.raise_for_status()\n                models = tags_response.json()\n                if asyncio.iscoroutine(models):\n                    models = await models\n                logger.debug(f\"Available models: {models}\")\n\n                # Filter models that are NOT embedding models\n                model_ids = []\n                for model in models[self.JSON_MODELS_KEY]:\n                    model_name = model[self.JSON_NAME_KEY]\n                    logger.debug(f\"Checking model: {model_name}\")\n\n                    payload = {\"model\": model_name}\n                    show_response = await client.post(show_url, json=payload)\n                    show_response.raise_for_status()\n                    json_data = show_response.json()\n                    if asyncio.iscoroutine(json_data):\n                        json_data = await json_data\n                    capabilities = json_data.get(self.JSON_CAPABILITIES_KEY, [])\n                    logger.debug(f\"Model: {model_name}, Capabilities: {capabilities}\")\n\n                    if self.DESIRED_CAPABILITY in capabilities:\n                        model_ids.append(model_name)\n\n        except (httpx.RequestError, ValueError) as e:\n            msg = \"Could not get model names from Ollama.\"\n            raise ValueError(msg) from e\n\n        return (\n            model_ids if not tool_model_enabled else [model for model in model_ids if self.supports_tool_calling(model)]\n        )\n\n    def supports_tool_calling(self, model: str) -> bool:\n        \"\"\"Check if model name is in the base of any models example llama3.3 can have 1b and 2b.\"\"\"\n        return any(model.startswith(f\"{tool_model}\") for tool_model in OLLAMA_TOOL_MODELS_BASE)\n"
                            },
                            "format": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Format",
                                "dynamic": false,
                                "info": "Specify the format of the output (e.g., json).",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "format",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "input_value": {
                                "_input_type": "MessageInput",
                                "advanced": false,
                                "display_name": "Input",
                                "dynamic": false,
                                "info": "",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "metadata": {
                                "_input_type": "DictInput",
                                "advanced": true,
                                "display_name": "Metadata",
                                "dynamic": false,
                                "info": "Metadata to add to the run trace.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "metadata",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "type": "dict",
                                "value": {}
                            },
                            "mirostat": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Mirostat",
                                "dynamic": false,
                                "info": "Enable/disable Mirostat sampling for controlling perplexity.",
                                "name": "mirostat",
                                "options": [
                                    "Disabled",
                                    "Mirostat",
                                    "Mirostat 2.0"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Disabled"
                            },
                            "mirostat_eta": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Mirostat Eta",
                                "dynamic": false,
                                "info": "Learning rate for Mirostat algorithm. (Default: 0.1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "mirostat_eta",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "mirostat_tau": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Mirostat Tau",
                                "dynamic": false,
                                "info": "Controls the balance between coherence and diversity of the output. (Default: 5.0)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "mirostat_tau",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "model_name": {
                                "_input_type": "DropdownInput",
                                "advanced": false,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Model Name",
                                "dynamic": false,
                                "info": "Refer to https://ollama.com/library for more models.",
                                "name": "model_name",
                                "options": [
                                    "PetrosStav/gemma3-tools:4b",
                                    "PetrosStav/gemma3-tools:12b",
                                    "qwen3:30b",
                                    "qwen3:8b",
                                    "qwen3:4b",
                                    "qwen3:1.7b",
                                    "qwen3:0.6b",
                                    "gemma3:latest",
                                    "gemma3:12b",
                                    "gemma3:4b",
                                    "qwen2.5:latest",
                                    "gemma2:27b",
                                    "gemma2:9b",
                                    "qwen2.5:32b",
                                    "deepseek-r1:14b",
                                    "deepseek-r1:1.5b",
                                    "deepseek-r1:7b",
                                    "codegemma:latest",
                                    "gemma2:2b",
                                    "llama3.1:latest",
                                    "deepseek-coder:6.7b",
                                    "deepseek-coder:latest",
                                    "llama3.3:latest",
                                    "qwq:latest",
                                    "qwen2.5-coder:14b",
                                    "starcoder2:instruct",
                                    "llama3.2:latest",
                                    "llama3.2:1b",
                                    "mistral-nemo:latest",
                                    "gemma2:latest"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "real_time_refresh": true,
                                "refresh_button": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "num_ctx": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Context Window Size",
                                "dynamic": false,
                                "info": "Size of the context window for generating tokens. (Default: 2048)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_ctx",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "num_gpu": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Number of GPUs",
                                "dynamic": false,
                                "info": "Number of GPUs to use for computation. (Default: 1 on macOS, 0 to disable)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_gpu",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "num_thread": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Number of Threads",
                                "dynamic": false,
                                "info": "Number of threads to use during computation. (Default: detected for optimal performance)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "num_thread",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "repeat_last_n": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Repeat Last N",
                                "dynamic": false,
                                "info": "How far back the model looks to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "repeat_last_n",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "repeat_penalty": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Repeat Penalty",
                                "dynamic": false,
                                "info": "Penalty for repetitions in generated text. (Default: 1.1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "repeat_penalty",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "stop_tokens": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Stop Tokens",
                                "dynamic": false,
                                "info": "Comma-separated list of tokens to signal the model to stop generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "stop_tokens",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "stream": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Stream",
                                "dynamic": false,
                                "info": "Stream the response from the model. Streaming works only in Chat.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "stream",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            },
                            "system": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "System",
                                "dynamic": false,
                                "info": "System to use for generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "system",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "system_message": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "System Message",
                                "dynamic": false,
                                "info": "System message to pass to the model.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "system_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "You are an Comedian. Every time give answer the comedian style."
                            },
                            "tags": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Tags",
                                "dynamic": false,
                                "info": "Comma-separated list of tags to add to the run trace.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "tags",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "temperature": {
                                "_input_type": "SliderInput",
                                "advanced": true,
                                "display_name": "Temperature",
                                "dynamic": false,
                                "info": "",
                                "max_label": "",
                                "max_label_icon": "",
                                "min_label": "",
                                "min_label_icon": "",
                                "name": "temperature",
                                "placeholder": "",
                                "range_spec": {
                                    "max": 1,
                                    "min": 0,
                                    "step": 0.01,
                                    "step_type": "float"
                                },
                                "required": false,
                                "show": true,
                                "slider_buttons": false,
                                "slider_buttons_options": [],
                                "slider_input": false,
                                "title_case": false,
                                "tool_mode": false,
                                "type": "slider",
                                "value": 0.1
                            },
                            "template": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Template",
                                "dynamic": false,
                                "info": "Template to use for generating text.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "tfs_z": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "TFS Z",
                                "dynamic": false,
                                "info": "Tail free sampling value. (Default: 1)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "tfs_z",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "timeout": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Timeout",
                                "dynamic": false,
                                "info": "Timeout for the request stream.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "timeout",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "tool_model_enabled": {
                                "_input_type": "BoolInput",
                                "advanced": false,
                                "display_name": "Tool Model Enabled",
                                "dynamic": false,
                                "info": "Whether to enable tool calling in the model.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "tool_model_enabled",
                                "placeholder": "",
                                "real_time_refresh": true,
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            },
                            "top_k": {
                                "_input_type": "IntInput",
                                "advanced": true,
                                "display_name": "Top K",
                                "dynamic": false,
                                "info": "Limits token selection to top K. (Default: 40)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "top_k",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "int",
                                "value": ""
                            },
                            "top_p": {
                                "_input_type": "FloatInput",
                                "advanced": true,
                                "display_name": "Top P",
                                "dynamic": false,
                                "info": "Works together with top-k. (Default: 0.9)",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "top_p",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "float",
                                "value": ""
                            },
                            "verbose": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Verbose",
                                "dynamic": false,
                                "info": "Whether to print out response text.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "verbose",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": false
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": true,
                    "type": "OllamaModel"
                },
                "id": "OllamaModel-17FDw",
                "measured": {
                    "height": 565,
                    "width": 320
                },
                "position": {
                    "x": 3381.5016544261134,
                    "y": 484.85542589883255
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "ChatInput-CrOsS",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "category": "inputs",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Get chat inputs from the Playground.",
                        "display_name": "Chat Input",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "input_value",
                            "should_store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "files",
                            "background_color",
                            "chat_icon",
                            "text_color"
                        ],
                        "frozen": false,
                        "icon": "MessagesSquare",
                        "key": "ChatInput",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": true,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "method": "message_response",
                                "name": "message",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 0.0020353564437605998,
                        "template": {
                            "_type": "Component",
                            "background_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Background Color",
                                "dynamic": false,
                                "info": "The background color of the icon.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "background_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "chat_icon": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Icon",
                                "dynamic": false,
                                "info": "The icon of the message.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "chat_icon",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                            },
                            "files": {
                                "_input_type": "FileInput",
                                "advanced": true,
                                "display_name": "Files",
                                "dynamic": false,
                                "fileTypes": [
                                    "txt",
                                    "md",
                                    "mdx",
                                    "csv",
                                    "json",
                                    "yaml",
                                    "yml",
                                    "xml",
                                    "html",
                                    "htm",
                                    "pdf",
                                    "docx",
                                    "py",
                                    "sh",
                                    "sql",
                                    "js",
                                    "ts",
                                    "tsx",
                                    "jpg",
                                    "jpeg",
                                    "png",
                                    "bmp",
                                    "image"
                                ],
                                "file_path": "",
                                "info": "Files to be sent with the message.",
                                "list": true,
                                "list_add_label": "Add More",
                                "name": "files",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "temp_file": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "file",
                                "value": ""
                            },
                            "input_value": {
                                "_input_type": "MultilineInput",
                                "advanced": false,
                                "copy_field": false,
                                "display_name": "Text",
                                "dynamic": false,
                                "info": "Message to be passed as input.",
                                "input_types": [],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "multiline": true,
                                "name": "input_value",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "sender": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Sender Type",
                                "dynamic": false,
                                "info": "Type of sender.",
                                "name": "sender",
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "User"
                            },
                            "sender_name": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Sender Name",
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "sender_name",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "User"
                            },
                            "session_id": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Session ID",
                                "dynamic": false,
                                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "session_id",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "should_store_message": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Store Messages",
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "should_store_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            },
                            "text_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Text Color",
                                "dynamic": false,
                                "info": "The text color of the name",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "text_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": false,
                    "type": "ChatInput"
                },
                "id": "ChatInput-CrOsS",
                "measured": {
                    "height": 66,
                    "width": 192
                },
                "position": {
                    "x": 3035.607137188097,
                    "y": 486.110023835621
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "ChatOutput-lpF8f",
                    "node": {
                        "base_classes": [
                            "Message"
                        ],
                        "beta": false,
                        "category": "outputs",
                        "conditional_paths": [],
                        "custom_fields": {},
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "documentation": "",
                        "edited": false,
                        "field_order": [
                            "input_value",
                            "should_store_message",
                            "sender",
                            "sender_name",
                            "session_id",
                            "data_template",
                            "background_color",
                            "chat_icon",
                            "text_color",
                            "clean_data"
                        ],
                        "frozen": false,
                        "icon": "MessagesSquare",
                        "key": "ChatOutput",
                        "legacy": false,
                        "lf_version": "1.4.3",
                        "metadata": {},
                        "minimized": true,
                        "output_types": [],
                        "outputs": [
                            {
                                "allows_loop": false,
                                "cache": true,
                                "display_name": "Message",
                                "method": "message_response",
                                "name": "message",
                                "selected": "Message",
                                "tool_mode": true,
                                "types": [
                                    "Message"
                                ],
                                "value": "__UNDEFINED__"
                            }
                        ],
                        "pinned": false,
                        "score": 0.003169567463043492,
                        "template": {
                            "_type": "Component",
                            "background_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Background Color",
                                "dynamic": false,
                                "info": "The background color of the icon.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "background_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "chat_icon": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Icon",
                                "dynamic": false,
                                "info": "The icon of the message.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "chat_icon",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "clean_data": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Basic Clean Data",
                                "dynamic": false,
                                "info": "Whether to clean the data",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "clean_data",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            },
                            "code": {
                                "advanced": true,
                                "dynamic": true,
                                "fileTypes": [],
                                "file_path": "",
                                "info": "",
                                "list": false,
                                "load_from_db": false,
                                "multiline": true,
                                "name": "code",
                                "password": false,
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "type": "code",
                                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
                            },
                            "data_template": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Data Template",
                                "dynamic": false,
                                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "data_template",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "{text}"
                            },
                            "input_value": {
                                "_input_type": "HandleInput",
                                "advanced": false,
                                "display_name": "Text",
                                "dynamic": false,
                                "info": "Message to be passed as output.",
                                "input_types": [
                                    "Data",
                                    "DataFrame",
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "input_value",
                                "placeholder": "",
                                "required": true,
                                "show": true,
                                "title_case": false,
                                "trace_as_metadata": true,
                                "type": "other",
                                "value": ""
                            },
                            "sender": {
                                "_input_type": "DropdownInput",
                                "advanced": true,
                                "combobox": false,
                                "dialog_inputs": {},
                                "display_name": "Sender Type",
                                "dynamic": false,
                                "info": "Type of sender.",
                                "name": "sender",
                                "options": [
                                    "Machine",
                                    "User"
                                ],
                                "options_metadata": [],
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "toggle": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "Machine"
                            },
                            "sender_name": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Sender Name",
                                "dynamic": false,
                                "info": "Name of the sender.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "sender_name",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": "AI"
                            },
                            "session_id": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Session ID",
                                "dynamic": false,
                                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "session_id",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            },
                            "should_store_message": {
                                "_input_type": "BoolInput",
                                "advanced": true,
                                "display_name": "Store Messages",
                                "dynamic": false,
                                "info": "Store the message in the history.",
                                "list": false,
                                "list_add_label": "Add More",
                                "name": "should_store_message",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_metadata": true,
                                "type": "bool",
                                "value": true
                            },
                            "text_color": {
                                "_input_type": "MessageTextInput",
                                "advanced": true,
                                "display_name": "Text Color",
                                "dynamic": false,
                                "info": "The text color of the name",
                                "input_types": [
                                    "Message"
                                ],
                                "list": false,
                                "list_add_label": "Add More",
                                "load_from_db": false,
                                "name": "text_color",
                                "placeholder": "",
                                "required": false,
                                "show": true,
                                "title_case": false,
                                "tool_mode": false,
                                "trace_as_input": true,
                                "trace_as_metadata": true,
                                "type": "str",
                                "value": ""
                            }
                        },
                        "tool_mode": false
                    },
                    "showNode": false,
                    "type": "ChatOutput"
                },
                "id": "ChatOutput-lpF8f",
                "measured": {
                    "height": 66,
                    "width": 192
                },
                "position": {
                    "x": 3846.9016300708154,
                    "y": 481.817460381215
                },
                "selected": false,
                "type": "genericNode"
            },
            {
                "data": {
                    "id": "note-9XfXq",
                    "node": {
                        "description": "## \ud83d\udcac Chat Input\n\n- Used to send messages to the LLM in **chat format**.\n- Preferred when building interactive chatbots or assistant UIs.\n- Replaces the need for a static **Text Input**.\n\n---\n\n## \ud83d\udcac Chat Output\n\n- Displays the LLM\u2019s response in **chat format**.\n- Preferred for dynamic chat experiences.\n- Replaces the need for a static **Text Output**.\n\n---\n",
                        "display_name": "",
                        "documentation": "",
                        "template": {}
                    },
                    "type": "note"
                },
                "id": "note-9XfXq",
                "measured": {
                    "height": 537,
                    "width": 325
                },
                "position": {
                    "x": 4081.8843146454183,
                    "y": 480.45736108346824
                },
                "selected": false,
                "type": "noteNode"
            }
        ],
        "viewport": {
            "x": 237.88495729388796,
            "y": 176.4297140125675,
            "zoom": 0.766309980103891
        }
    },
    "description": "Building Powerful Solutions with Language Models.",
    "endpoint_name": null,
    "id": "3569a727-6520-4309-b24b-ccc0af644b12",
    "is_component": false,
    "last_tested_version": "1.4.2",
    "name": "Case1_Work with Local Models",
    "tags": []
}
